[{"talkType":"Keynote","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Scala 3 is going to bring a variety of exciting new features to Scala developers. But the road ahead for existing Scala 2.x projects may be bumpy as we come up against the challenges of migrating an entire ecosystem to a new compiler and binary format.</p>\n<p>We will explore some of the best new features in Scala 3, with a particular focus on its new metaprogramming features, which will replace Scala 2&#x27;s macros, and we will explore different strategies for upgrading existing code to Scala 3.</p>\n<p>Finally, I will present Fury, an experimental build tool which can compile mixed Scala 2 and 3 projects, and which will offer some advanced cross-building features which should go a long way to easing the transition to Scala 3 while the two major versions of the language coexist.</p>\n","id":"JKB-0713","speakers":[{"name":"Jon Pretty","company":"Propensive","id":"1c880401ed12cc276b0f15a351827f2ca27737af","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/1c880401ed12cc276b0f15a351827f2ca27737af","rel":"https://cfp.scala.io/api/profile/speaker","title":"Jon Pretty"},"twitter":"@propensive"}],"title":"The Future of Scala","lang":"en","summary":"Scala 3 is going to bring a variety of exciting new features to Scala developers. But the road ahead for existing Scala 2.x projects may be bumpy as we come up against the challenges of migrating an entire ecosystem to a new compiler and binary format.\r\n\r\nWe will explore some of the best new features in Scala 3, with a particular focus on its new metaprogramming features, which will replace Scala 2's macros, and we will explore different strategies for upgrading existing code to Scala 3.\r\n\r\nFinally, I will present Fury, an experimental build tool which can compile mixed Scala 2 and 3 projects, and which will offer some advanced cross-building features which should go a long way to easing the transition to Scala 3 while the two major versions of the language coexist."},{"talkType":"Keynote","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Scala 3 is around the corner. We plan to go into feature freeze next year and release the year after. The goal of Scala 3 is to achieve a simpler, more regular, and more expressive version of the language. Many of its features are already in place but there also remains a lot to do. My talk will give an overview on where we stand now, what next steps are planned, and how you can prepare for the change and help shape the future of the ecosystem.</p>\n","id":"NSF-0936","speakers":[{"name":"Martin Odersky","company":"EPFL","id":"6b12b80e28ace01547216eadbe535c59a684e8d7","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/6b12b80e28ace01547216eadbe535c59a684e8d7","rel":"https://cfp.scala.io/api/profile/speaker","title":"Martin Odersky"},"twitter":"@odersky"}],"title":"Towards Scala 3 - A Status Report","lang":"en","summary":"Scala 3 is around the corner. We plan to go into feature freeze next year and release the year after. The goal of Scala 3 is to achieve a simpler, more regular, and more expressive version of the language. Many of its features are already in place but there also remains a lot to do. My talk will give an overview on where we stand now, what next steps are planned, and how you can prepare for the change and help shape the future of the ecosystem."},{"talkType":"Keynote","track":"Type & Functional Programming","audienceLevel":"Débutant","summaryAsHtml":"<p>A year ago at ScalaIO, John A. De Goes revealed the design of the Scalaz 8 IO monad in an epic standoff between Cats Effect and Scalaz 8 IO that became known as the #ClashOfIOs. Now, one year later, the ecosystem has been forever altered, as the event inspired other projects to adopt some of the Scalaz 8 design decisions.</p>\n<p>Since that date, the Scalaz 8 effect system has continued rapidly evolving. The system has been pulled out into ZIO, a standalone library with no dependencies. A new bifunctor design allows typed error handling; performance has been improved further; the error model refined to precision; the code battle-hardened; and new primitives have been introduced for composable, type-safe, leak-free, and high-performance concurrency.</p>\n<p>In this presentation created exclusively for ScalaIO, John A. De Goes presents the latest work on finalizing the effect system. John takes attendees on a tour that reveals the beauty and the practicality of ZIO, and challenges attendees to embrace a functional way of solving the hard problems they encounter at work—without compromising performance or principles.</p>\n","id":"SIZ-6759","speakers":[{"name":"John A. De Goes","company":"De Goes Consulting","id":"d5930854ab683d4bfd1efd2cdc6d648827ebc998","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/d5930854ab683d4bfd1efd2cdc6d648827ebc998","rel":"https://cfp.scala.io/api/profile/speaker","title":"John A. De Goes"},"twitter":"@jdegoes"}],"title":"ZIO: Next-Generation Effects in Scala","lang":"en","summary":"A year ago at ScalaIO, John A. De Goes revealed the design of the Scalaz 8 IO monad in an epic standoff between Cats Effect and Scalaz 8 IO that became known as the #ClashOfIOs. Now, one year later, the ecosystem has been forever altered, as the event inspired other projects to adopt some of the Scalaz 8 design decisions.\r\n\r\nSince that date, the Scalaz 8 effect system has continued rapidly evolving. The system has been pulled out into ZIO, a standalone library with no dependencies. A new bifunctor design allows typed error handling; performance has been improved further; the error model refined to precision; the code battle-hardened; and new primitives have been introduced for composable, type-safe, leak-free, and high-performance concurrency.\r\n\r\nIn this presentation created exclusively for ScalaIO, John A. De Goes presents the latest work on finalizing the effect system. John takes attendees on a tour that reveals the beauty and the practicality of ZIO, and challenges attendees to embrace a functional way of solving the hard problems they encounter at work—without compromising performance or principles."},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Vous trouvez les revues de code inefficaces, trop chronophages ou bloquantes pour votre mise en production ? Vous n&#x27;osez pas vous lancer pour vos premières code review parce que vos collègues ont plus d&#x27;expérience en Scala ? Vous avez peu de connaissance ou pratique sur le sujet ?</p>\n<p>Si vous répondez par la positive à l&#x27;une de ces questions, alors les concepts de <em>code review culture</em> devraient vous intéresser.</p>\n<p>Dans ce talk, nous verrons comment appliquer différents principes pour rendre les code reviews plus utiles, constructives et enrichissantes pour tous les parties engagés. Et surtout, nous verrons comment ces principes s&#x27;appliquent concrètement sur des projets Scala, avec en exemple notre organisation des code reviews au sein de notre équipe chez Teads.</p>\n","id":"IJW-4169","speakers":[{"name":"Tristan Sallé","company":"Teads","id":"6db5adbbc55dbaa8e25472b24566e8ded80d740f","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/6db5adbbc55dbaa8e25472b24566e8ded80d740f","rel":"https://cfp.scala.io/api/profile/speaker","title":"Tristan Sallé"},"twitter":"@TristanSoullz"}],"title":"Tu penses quoi de mon Scala ? Parlons code review !","lang":"fr","summary":"Vous trouvez les revues de code inefficaces, trop chronophages ou bloquantes pour votre mise en production ? Vous n'osez pas vous lancer pour vos premières code review parce que vos collègues ont plus d'expérience en Scala ? Vous avez peu de connaissance ou pratique sur le sujet ?\r\n\r\nSi vous répondez par la positive à l'une de ces questions, alors les concepts de *code review culture* devraient vous intéresser.\r\n\r\nDans ce talk, nous verrons comment appliquer différents principes pour rendre les code reviews plus utiles, constructives et enrichissantes pour tous les parties engagés. Et surtout, nous verrons comment ces principes s'appliquent concrètement sur des projets Scala, avec en exemple notre organisation des code reviews au sein de notre équipe chez Teads."},{"talkType":"Conference","track":"Other Languages","audienceLevel":"Débutant","summaryAsHtml":"<p>Scala and Haskell are amazing languages, they share lots of similarities. They are both very advanced functional programming languages with a very rich type system. But they are also different: Scala has sub-typing and Object-Oriented Programming features while Haskell is pure and lazy. So which one should you chose? In this talk, you will see you don&#x27;t have to!</p>\n<p>This talks presents Eta (https://eta-lang.org/), a Haskell dialect for the JVM. We will see that Scala and Haskell programming are very close, but also how Haskell differs from Scala, how to benefit from similarities and differences. We will see you how to use Eta and Scala together, even in the same project, and why this is a great idea!</p>\n","id":"LFI-3794","speakers":[{"name":"Christophe Calvès","company":"MFG Labs","id":"0257e3d8b10e0fae9ae649eb3000c8a823a58b11","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/0257e3d8b10e0fae9ae649eb3000c8a823a58b11","rel":"https://cfp.scala.io/api/profile/speaker","title":"Christophe Calvès"},"twitter":"@chrilves"}],"title":"Reuniting the familly with Eta: Haskell on the JVM.","lang":"en","summary":"Scala and Haskell are amazing languages, they share lots of similarities. They are both very advanced functional programming languages with a very rich type system. But they are also different: Scala has sub-typing and Object-Oriented Programming features while Haskell is pure and lazy. So which one should you chose? In this talk, you will see you don't have to!\r\n\r\nThis talks presents Eta (https://eta-lang.org/), a Haskell dialect for the JVM. We will see that Scala and Haskell programming are very close, but also how Haskell differs from Scala, how to benefit from similarities and differences. We will see you how to use Eta and Scala together, even in the same project, and why this is a great idea!"},{"talkType":"Short conference","track":"Scala & Ecosystem","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Durant ce talk je présenterai ces 2 écosystèmes du monde Scala, qui ont chacun des buts et des approches différentes de la programmation fonctionnelle.\nNous comparerons les frameworks et librairies des écosystèmes Lightbend (Play, Akka, Slick...) et Typelevel (Cats/Cats Effect, Http4s, Monix, Doobie...) avec des exemples concrets et discuterons des approches et philosophies qui se trouvent derrière.</p>\n","id":"JWO-3045","speakers":[{"name":"Loïc Descotte","company":"Kaizen Solutions","id":"35a71298c1ba3df85d78c96000fa1d935d0a0b30","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/35a71298c1ba3df85d78c96000fa1d935d0a0b30","rel":"https://cfp.scala.io/api/profile/speaker","title":"Loïc Descotte"},"twitter":"loic_d"}],"title":"Ecosystèmes Scala : Lightbend vs Typelevel","lang":"fr","summary":"Durant ce talk je présenterai ces 2 écosystèmes du monde Scala, qui ont chacun des buts et des approches différentes de la programmation fonctionnelle. \r\nNous comparerons les frameworks et librairies des écosystèmes Lightbend (Play, Akka, Slick...) et Typelevel (Cats/Cats Effect, Http4s, Monix, Doobie...) avec des exemples concrets et discuterons des approches et philosophies qui se trouvent derrière."},{"talkType":"Conference","track":"BigData & MachineLearning","audienceLevel":"Débutant","summaryAsHtml":"<p>New to Spark? Or do you just want to get an idea how Frameless works? This talk will serve as both an introduction to Apache Spark and a comparison of the Spark DataFrame and Datasets APIs with the Typelevel Frameless API.</p>\n","id":"WUW-9677","speakers":[{"name":"Brian Clapper","company":"Databricks","id":"6202fd19a1b04639339b6af77047cf581d1a9b01","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/6202fd19a1b04639339b6af77047cf581d1a9b01","rel":"https://cfp.scala.io/api/profile/speaker","title":"Brian Clapper"},"twitter":"@brianclapper"}],"title":"Introduction to Apache Spark using Frameless","lang":"en","summary":"New to Spark? Or do you just want to get an idea how Frameless works? This talk will serve as both an introduction to Apache Spark and a comparison of the Spark DataFrame and Datasets APIs with the Typelevel Frameless API."},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Since Scala 2.0 the language contains implicit definitions.\nOn the one hand, they provide a convenient way to implement certain language features outside of the compiler and reduce code boilerplate.\nOn the other hand, they have been a constant source of surprise and confusion especially among the less experienced Scala developer.\nSo, as developers, should we worry about implicits?\nAre they really used a lot?\nHow are the implicits actually used?\nIs it that they are used just in a few &quot;big&quot; libraries, or are they everywhere?</p>\n<p>In this talk I will show how to answer these and other questions by asking them directly to the large corpus of Scala code that is publicly available on Github.\nThanks to Scalameta and Semanticdb the answers are available almost at our fingertips.\nTogether with the audience, we will dive into millions lines of Scala code, classify the call sites and declarations involving implicits to see what kind of implicits and patterns are being used to answer the above questions.</p>\n","id":"AIY-6535","speakers":[{"name":"Filip Krikava","company":"Czech Technical University","id":"b5374437676c128fec97ae92c451fe4e013b6287","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/b5374437676c128fec97ae92c451fe4e013b6287","rel":"https://cfp.scala.io/api/profile/speaker","title":"Filip Krikava"},"twitter":"@fikovnik"}],"title":"Everything you ever wanted to know about Scala implicits, but weren't sure how to ask","lang":"en","summary":"Since Scala 2.0 the language contains implicit definitions.\r\nOn the one hand, they provide a convenient way to implement certain language features outside of the compiler and reduce code boilerplate.\r\nOn the other hand, they have been a constant source of surprise and confusion especially among the less experienced Scala developer.\r\nSo, as developers, should we worry about implicits?\r\nAre they really used a lot?\r\nHow are the implicits actually used?\r\nIs it that they are used just in a few \"big\" libraries, or are they everywhere?\r\n\r\nIn this talk I will show how to answer these and other questions by asking them directly to the large corpus of Scala code that is publicly available on Github.\r\nThanks to Scalameta and Semanticdb the answers are available almost at our fingertips.\r\nTogether with the audience, we will dive into millions lines of Scala code, classify the call sites and declarations involving implicits to see what kind of implicits and patterns are being used to answer the above questions."},{"talkType":"Short conference","track":"Type & Functional Programming","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Cats est une librairie parfaite quand on veut écrire du code scala avec un style plus fonctionnel.\nMais comment mixer du fonctionnel avec une application play basée sur des futures et akka stream ?<br  /></p>\n<p>Dans cette session nous verrons comment refactorer du code scala &quot;classique&quot; en utilisant le pattern &quot;tagless final&quot; et comment intégrer ce code avec le framework play.</p>\n","id":"CVI-4324","speakers":[{"name":"Alexandre Delegue","company":"MAIF","id":"09f4a05cc4bb2e4939f3a6d7976bb6305ff366e5","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/09f4a05cc4bb2e4939f3a6d7976bb6305ff366e5","rel":"https://cfp.scala.io/api/profile/speaker","title":"Alexandre Delegue"},"twitter":"@chanksleroux"}],"title":"Refactorer une application play en utilisant cats et cats IO! ","lang":"fr","summary":"Cats est une librairie parfaite quand on veut écrire du code scala avec un style plus fonctionnel. \r\nMais comment mixer du fonctionnel avec une application play basée sur des futures et akka stream ?  \r\n\r\nDans cette session nous verrons comment refactorer du code scala \"classique\" en utilisant le pattern \"tagless final\" et comment intégrer ce code avec le framework play. \r\n"},{"talkType":"Short conference","track":"Apprendre Scala","audienceLevel":"Débutant","summaryAsHtml":"<p>La montée en compétence en programmation fonctionnelle demande du temps, de la patience et de la pratique, tant le <em>gap</em> avec d&#x27;autres paradigmes de programmation est important. La communauté Scala propose à cet effet divers supports (livres, MOOCs, exercices en ligne...). Mais ces supports demandent toujours un temps souvent précieux pour être assimilés.</p>\n<p>Dans cet objectif, rien ne vaut l&#x27;accompagnement d&#x27;un mentor. La concision de la programmation fonctionnelle aidant, celui-ci peut mettre en place des exercices courts qui seront de véritables catalyseurs de discussions permettant au profils plus juniors d&#x27;assimiler des concepts.</p>\n<p>Sur la base de retours d&#x27;expérience, cette courte présentation va vous montrer des exemples de tels exercices, comment les mettre en places avec une équipe colocalisée ou en <em>remote</em> et les résultats obtenus.</p>\n","id":"JAW-9769","speakers":[{"name":"François Sarradin","company":"Univalence","id":"f6bf9fc6e486f9190afd419e15535ca7f9bcfcfe","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/f6bf9fc6e486f9190afd419e15535ca7f9bcfcfe","rel":"https://cfp.scala.io/api/profile/speaker","title":"François Sarradin"},"twitter":"@fsarradin"}],"title":"Back to school : des exercices pour monter en compétence en FP","lang":"fr","summary":"La montée en compétence en programmation fonctionnelle demande du temps, de la patience et de la pratique, tant le *gap* avec d'autres paradigmes de programmation est important. La communauté Scala propose à cet effet divers supports (livres, MOOCs, exercices en ligne...). Mais ces supports demandent toujours un temps souvent précieux pour être assimilés.\r\n\r\nDans cet objectif, rien ne vaut l'accompagnement d'un mentor. La concision de la programmation fonctionnelle aidant, celui-ci peut mettre en place des exercices courts qui seront de véritables catalyseurs de discussions permettant au profils plus juniors d'assimiler des concepts.\r\n\r\nSur la base de retours d'expérience, cette courte présentation va vous montrer des exemples de tels exercices, comment les mettre en places avec une équipe colocalisée ou en *remote* et les résultats obtenus."},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Vous êtes-vous jamais demandé quelle était la recette magique de Scala.js ? Ce qui le définit avant tout, c&#x27;est d&#x27;être transplateforme. Un langage transplateforme est à la fois <em>portable</em> (la plupart du code compile et se comporte de la même façon sur différentes plateformes) et <em>interopérable</em> (du code écrit dans ce langage peut interopérer avec d&#x27;autres langages sur les plateformes cible).</p>\n<p>Cette présentation montre comment portabilité et interopérabilité dirigent chaque décision de conception, depuis le choix des fonctionnalités à intégrer jusqu&#x27;aux considérations de performance. D&#x27;une part, nous montrons que l&#x27;interopérabilité de Scala.js est <em>complète</em> par rapport à ECMAScript, ce qui garantit que Scala.js peut utiliser n&#x27;importe quelle bibliothèque JavaScript. D&#x27;autre part, nous donnons des clefs de compréhension quant aux fonctionnalités qui sont critiques pour la portabilité, et lesquelles peuvent être relâchées au nom des performances.</p>\n<p>Comme exercice pratique, nous étudions les principaux changements apportés au langage dans Scala.js 1.x par rapport à 0.6.x, et comment ils rendent Scala.js transplateforme.</p>\n","id":"DUE-0096","speakers":[{"name":"Sébastien Doeraene","company":"École polytechnique fédérale de Lausanne (EPFL)","id":"760ff76876819f409ea58bb94f3ce9e030615c19","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/760ff76876819f409ea58bb94f3ce9e030615c19","rel":"https://cfp.scala.io/api/profile/speaker","title":"Sébastien Doeraene"},"twitter":"@sjrdoeraene"}],"title":"La Recette Magique de Scala.js : un Langage Transplateforme","lang":"fr","summary":"Vous êtes-vous jamais demandé quelle était la recette magique de Scala.js ? Ce qui le définit avant tout, c'est d'être transplateforme. Un langage transplateforme est à la fois *portable* (la plupart du code compile et se comporte de la même façon sur différentes plateformes) et *interopérable* (du code écrit dans ce langage peut interopérer avec d'autres langages sur les plateformes cible).\r\n\r\nCette présentation montre comment portabilité et interopérabilité dirigent chaque décision de conception, depuis le choix des fonctionnalités à intégrer jusqu'aux considérations de performance. D'une part, nous montrons que l'interopérabilité de Scala.js est *complète* par rapport à ECMAScript, ce qui garantit que Scala.js peut utiliser n'importe quelle bibliothèque JavaScript. D'autre part, nous donnons des clefs de compréhension quant aux fonctionnalités qui sont critiques pour la portabilité, et lesquelles peuvent être relâchées au nom des performances.\r\n\r\nComme exercice pratique, nous étudions les principaux changements apportés au langage dans Scala.js 1.x par rapport à 0.6.x, et comment ils rendent Scala.js transplateforme."},{"talkType":"Conference","track":"Other Languages","audienceLevel":"Expert et sénior","summaryAsHtml":"<p>Oubliez les frameworks de Stream processing traditionnels (Flink, Storm, Spark Streaming etc...) Nous allons voir comment en utilisant le langage Rust et le framework Timely Dataflow (ainsi que son pendant Differential Dataflow) nous pouvons arriver à traiter plus de 30 millions d&#x27;events par seconde, depuis Kafka à partir d&#x27;un simple laptop. A la sortie de cette présentation vous pourrez abandonner définitivement vos cluster Hadoop, vos frameworks de Stream processing et même votre langage de prédilection (Scala) pour embrasser Rust et profiter des performances du code système natif (sur votre laptop).</p>\n","id":"UNP-4137","speakers":[{"name":"Vincent Van Steenbergen","company":"ThinkDeep AI","id":"ba311cf8958cd55e560e104b4d6978a4a6dce4e3","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/ba311cf8958cd55e560e104b4d6978a4a6dce4e3","rel":"https://cfp.scala.io/api/profile/speaker","title":"Vincent Van Steenbergen"},"twitter":"@nsteenv"}],"title":"How I ditched my Big Data Hadoop cluster for my laptop (while greatly improving performances)","lang":"fr","summary":"Oubliez les frameworks de Stream processing traditionnels (Flink, Storm, Spark Streaming etc...) Nous allons voir comment en utilisant le langage Rust et le framework Timely Dataflow (ainsi que son pendant Differential Dataflow) nous pouvons arriver à traiter plus de 30 millions d'events par seconde, depuis Kafka à partir d'un simple laptop. A la sortie de cette présentation vous pourrez abandonner définitivement vos cluster Hadoop, vos frameworks de Stream processing et même votre langage de prédilection (Scala) pour embrasser Rust et profiter des performances du code système natif (sur votre laptop).\r\n"},{"talkType":"Short conference","track":"BigData & MachineLearning","audienceLevel":"Débutant","summaryAsHtml":"<p>Le SQL est un standard pour accéder vos données, donc, dans un monde orienté flux, quoi de plus normal que de retrouver le SQL pour traiter vos streams. Dans ce talk, vous découvrirez les extensions apportées à SQL par Apache Calcite pour répondre à cette problématique. Allez, un petit exemple pour la route:  <code>select stream * from events</code></p>\n","id":"PUJ-5258","speakers":[{"name":"Bruno Bonnin","company":"Saagie","id":"8c595b8de0b739d7d008677372190cd3e4366f3e","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/8c595b8de0b739d7d008677372190cd3e4366f3e","rel":"https://cfp.scala.io/api/profile/speaker","title":"Bruno Bonnin"},"twitter":"@_bruno_b_"}],"title":"Stream processing et SQL","lang":"fr","summary":"Le SQL est un standard pour accéder vos données, donc, dans un monde orienté flux, quoi de plus normal que de retrouver le SQL pour traiter vos streams. Dans ce talk, vous découvrirez les extensions apportées à SQL par Apache Calcite pour répondre à cette problématique. Allez, un petit exemple pour la route:  `select stream * from events`"},{"talkType":"Conference","track":"Other Languages","audienceLevel":"Débutant","summaryAsHtml":"<p>We have almost 20 years of Scala experience between us and have experience with many other languages. Recently we have jumped onto Kotlin, because it look very promising as Java competitor.\nOf course there is no one size fits all solution. We will show how the two languages compare and explain why and when, you should pick one over the other. Or maybe should consider some else all together.</p>\n","id":"CAU-7310","speakers":[{"name":"Joost Heijkoop","company":"Xebia","id":"81746ad44709fbb132b2dec306bf037eef189bea","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/81746ad44709fbb132b2dec306bf037eef189bea","rel":"https://cfp.scala.io/api/profile/speaker","title":"Joost Heijkoop"},"twitter":null},{"name":"Urs Peter","company":"Xebia BV","id":"0ebafff843099e83d072d91d996b8afae2c58d11","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/0ebafff843099e83d072d91d996b8afae2c58d11","rel":"https://cfp.scala.io/api/profile/speaker","title":"Urs Peter"},"twitter":"@urs_peter"}],"title":"Kotlin vs Scala","lang":"en","summary":"We have almost 20 years of Scala experience between us and have experience with many other languages. Recently we have jumped onto Kotlin, because it look very promising as Java competitor. \r\nOf course there is no one size fits all solution. We will show how the two languages compare and explain why and when, you should pick one over the other. Or maybe should consider some else all together. "},{"talkType":"Conference","track":"Type & Functional Programming","audienceLevel":"Débutant","summaryAsHtml":"<p>Have you ever heard that querying database is a side-effect ?\nAnd you should handle side-effect with monad in functional programming ?\nThis talk is for you.\nUsing concepts you regularly heard of from functional programming (separation of representation and interpretation, referential transparency, lazy evaluation), we could express our database layer code as pure function using the Reader monad and interpret them when the result will be needed. During this talk we will introduce functional concepts listed before, then we will give the rationale of our approach, and we will deduce its design using these concepts.</p>\n","id":"BEG-3705","speakers":[{"name":"TANKOUA Stéphane","company":"Fabernovel Technologies","id":"9925989cd7e06e25dc6e767ff6de2740486b1295","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/9925989cd7e06e25dc6e767ff6de2740486b1295","rel":"https://cfp.scala.io/api/profile/speaker","title":"TANKOUA Stéphane"},"twitter":"@stefshine"}],"title":"Specializing the Reader monad for pure Database Programming","lang":"en","summary":"Have you ever heard that querying database is a side-effect ?\r\nAnd you should handle side-effect with monad in functional programming ?\r\nThis talk is for you.\r\nUsing concepts you regularly heard of from functional programming (separation of representation and interpretation, referential transparency, lazy evaluation), we could express our database layer code as pure function using the Reader monad and interpret them when the result will be needed. During this talk we will introduce functional concepts listed before, then we will give the rationale of our approach, and we will deduce its design using these concepts."},{"talkType":"Conference","track":"Apprendre Scala","audienceLevel":"Débutant","summaryAsHtml":"<p>Despite its increasing popularity, functional programming is still stuck in the back seat when it comes to the enterprise. This talk aims to address common pitfalls in enterprise software engineering which can be avoided through the application of functional programming principles, as well as to introduce the clarity and maintainability inherent to functional code. In this talk, we will cover computational effects including failure handling, IO and partiality using various functors and monads. We will also explore the &quot;softer&quot; side of teaching and advocating for FP at work, including strategies for coaching teammates off of imperative and side-effect ridden coding practices.</p>\n","id":"HAA-2943","speakers":[{"name":"Narek Asadorian","company":"Salesforce","id":"c2f26b399dbb864c9b2ae3d284f260f1f482b45f","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/c2f26b399dbb864c9b2ae3d284f260f1f482b45f","rel":"https://cfp.scala.io/api/profile/speaker","title":"Narek Asadorian"},"twitter":"@portal_narlish"}],"title":"Functional Programming: The Enterprise Edition","lang":"en","summary":"Despite its increasing popularity, functional programming is still stuck in the back seat when it comes to the enterprise. This talk aims to address common pitfalls in enterprise software engineering which can be avoided through the application of functional programming principles, as well as to introduce the clarity and maintainability inherent to functional code. In this talk, we will cover computational effects including failure handling, IO and partiality using various functors and monads. We will also explore the \"softer\" side of teaching and advocating for FP at work, including strategies for coaching teammates off of imperative and side-effect ridden coding practices."},{"talkType":"Conference","track":"Type & Functional Programming","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>What if I tell you that you can derive your HTTP client function from a single type? Aren&#x27;t you believing me? Okay, I will show how to do it.</p>\n<p>We will start slowly by working out a way to move our HTTP api description onto the type-level using exotic concepts like witness, or heterogenous list. Having accomplished that, we will shift gears and make a deep dive into type-level programming using type classes with recursive instance resolution to derive a fully fledge HTTP client function.</p>\n<p>You will see many a type parameter and will ask yourself: How many of them can someone possibly put into a single function signature? (Spoiler: the answer will be &quot;a lot&quot;)</p>\n<p>In the end, you have learned the following things:</p>\n<ol>\n<li>represent information on the type-level,</li>\n<li>use type classes and recursive instance resolution to derive functions,</li>\n<li>type-level programming is awesome.</li>\n</ol>\n","id":"MMB-4947","speakers":[{"name":"Paul Heymann","company":"XING SE","id":"36a1669e355e9c21d9a6289601670dd5aa2a4eae","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/36a1669e355e9c21d9a6289601670dd5aa2a4eae","rel":"https://cfp.scala.io/api/profile/speaker","title":"Paul Heymann"},"twitter":null}],"title":"Let's derive HTTP clients from types","lang":"en","summary":"What if I tell you that you can derive your HTTP client function from a single type? Aren't you believing me? Okay, I will show how to do it.\r\n\r\nWe will start slowly by working out a way to move our HTTP api description onto the type-level using exotic concepts like witness, or heterogenous list. Having accomplished that, we will shift gears and make a deep dive into type-level programming using type classes with recursive instance resolution to derive a fully fledge HTTP client function. \r\n\r\nYou will see many a type parameter and will ask yourself: How many of them can someone possibly put into a single function signature? (Spoiler: the answer will be \"a lot\")\r\n\r\nIn the end, you have learned the following things:\r\n  \r\n  1. represent information on the type-level,\r\n  2. use type classes and recursive instance resolution to derive functions,\r\n  3. type-level programming is awesome."},{"talkType":"Conference","track":"Apprendre Scala","audienceLevel":"Débutant","summaryAsHtml":"<p>Welcome to the world as seen through the eyes of a cluster node!</p>\n<p>In order to ensure fault-tolerance and scalability, reactive applications have no choice but to embrace distribution. Unfortunately, this also means embracing the uncertainty and nondeterminism that comes with building networked applications: changes in link quality, network partitions and outages of individual nodes are scenarios that need to be addressed first-hand when designing such systems.</p>\n<p>In this talk you will learn about failure detectors, gossip protocols and consensus protocols in the context of Akka Cluster.</p>\n","id":"VZY-7456","speakers":[{"name":"Manuel Bernhardt","company":"manuel.bernhardt.io","id":"ef4c9c3b4a7f7e7ca058103ce8a811ad06673f0e","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/ef4c9c3b4a7f7e7ca058103ce8a811ad06673f0e","rel":"https://cfp.scala.io/api/profile/speaker","title":"Manuel Bernhardt"},"twitter":"@elmanu"}],"title":"Is there anybody out there?","lang":"en","summary":"Welcome to the world as seen through the eyes of a cluster node!\r\n\r\nIn order to ensure fault-tolerance and scalability, reactive applications have no choice but to embrace distribution. Unfortunately, this also means embracing the uncertainty and nondeterminism that comes with building networked applications: changes in link quality, network partitions and outages of individual nodes are scenarios that need to be addressed first-hand when designing such systems.\r\n\r\nIn this talk you will learn about failure detectors, gossip protocols and consensus protocols in the context of Akka Cluster."},{"talkType":"Short conference","track":"Type & Functional Programming","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Au cours d&#x27;un court voyage au pays de types, nous allons voir comment certains de ces types peuvent être mis en évidence par le biais de fonctions de «transformation» dites d&#x27;ordre supérieur. Pas à pas nous découvrirons ou redécouvrirons l&#x27;identité, le foncteur, l&#x27;applicative, la monade puis la composition, la pipelining et enfin la composition de Kliesli.</p>\n<p>Cette présentation propose d&#x27;aborder le typage sous un autre biais avec comme ligne directrice la composition de fonctions.</p>\n","id":"NCU-7301","speakers":[{"name":"Didier Plaindoux","company":"Fungus","id":"6c63f991695e52d918d78ceebf825e2113b7f2b5","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/6c63f991695e52d918d78ceebf825e2113b7f2b5","rel":"https://cfp.scala.io/api/profile/speaker","title":"Didier Plaindoux"},"twitter":"@dplaindoux"}],"title":"Fonction de Transformation dite d'Ordre Supérieur","lang":"fr","summary":"Au cours d'un court voyage au pays de types, nous allons voir comment certains de ces types peuvent être mis en évidence par le biais de fonctions de «transformation» dites d'ordre supérieur. Pas à pas nous découvrirons ou redécouvrirons l'identité, le foncteur, l'applicative, la monade puis la composition, la pipelining et enfin la composition de Kliesli.\r\n\r\nCette présentation propose d'aborder le typage sous un autre biais avec comme ligne directrice la composition de fonctions."},{"talkType":"Short conference","track":"Scala & Ecosystem","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>La lecture d&#x27;une base de code Akka n&#x27;est pas chose aisée.</p>\n<ul>\n<li>Quels sont les types de message acceptés par un acteur ?</li>\n<li>La méthode Receive ayant un retour à unit, difficile de savoir ce que sera la réponse,</li>\n</ul>\n<p>En partant d&#x27;une application Akka existante, nous allons voir comment la refactorer en utilisant la notion de protocole de message ainsi que la notion de Behavior.</p>\n<p>Nous allons également voir comment faire coexister des acteurs typés et non typés pour ne pas faire une refactoring en mode big bang.</p>\n","id":"PYZ-6138","speakers":[{"name":"Damien Gouyette","company":"Freelance","id":"f9fc65391600558c83fb666fc85b81b17a5d4e7c","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/f9fc65391600558c83fb666fc85b81b17a5d4e7c","rel":"https://cfp.scala.io/api/profile/speaker","title":"Damien Gouyette"},"twitter":"@cestpasdur"}],"title":"Délit de sale type","lang":"fr","summary":"La lecture d'une base de code Akka n'est pas chose aisée.\r\n\r\n- Quels sont les types de message acceptés par un acteur ?\r\n- La méthode Receive ayant un retour à unit, difficile de savoir ce que sera la réponse,\r\n\r\nEn partant d'une application Akka existante, nous allons voir comment la refactorer en utilisant la notion de protocole de message ainsi que la notion de Behavior. \r\n\r\nNous allons également voir comment faire coexister des acteurs typés et non typés pour ne pas faire une refactoring en mode big bang."},{"talkType":"Short conference","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Le feature flipping est devenu de plus en plus incontournable dans le développement et le déploiement continu d&#x27;applications modernes.\nMalheureusement il n&#x27;est pas très aisé de mettre en place une solution uniforme dans un contexte micro-service et multi technologique.</p>\n<p>Avec son approche &quot;API first&quot; Izanami, la brique de feature flipping / AB testing développé par la MAIF (et écrit en scala :) !!!), est un parfait candidat pour répondre à tous ces besoins.</p>\n<p>Dans cette session nous verrons comment fonctionne Izanami et comment intégrer le feature flipping dans une application scala/react en utilisant les clients ad hoc.</p>\n","id":"HPB-6840","speakers":[{"name":"Alexandre Delegue","company":"MAIF","id":"09f4a05cc4bb2e4939f3a6d7976bb6305ff366e5","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/09f4a05cc4bb2e4939f3a6d7976bb6305ff366e5","rel":"https://cfp.scala.io/api/profile/speaker","title":"Alexandre Delegue"},"twitter":"@chanksleroux"}],"title":"Feature flippez vos applications scala avec Izanami.","lang":"fr","summary":"Le feature flipping est devenu de plus en plus incontournable dans le développement et le déploiement continu d'applications modernes. \r\nMalheureusement il n'est pas très aisé de mettre en place une solution uniforme dans un contexte micro-service et multi technologique. \r\n\r\nAvec son approche \"API first\" Izanami, la brique de feature flipping / AB testing développé par la MAIF (et écrit en scala :) !!!), est un parfait candidat pour répondre à tous ces besoins. \r\n\r\nDans cette session nous verrons comment fonctionne Izanami et comment intégrer le feature flipping dans une application scala/react en utilisant les clients ad hoc."},{"talkType":"Short conference","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Voilà, j&#x27;ai du code scala que je souhaite partager avec l&#x27;équipe, maintenant, comment je fais ?</p>\n<p>Sbt est devenu l&#x27;outil de build principal de scala, voyons étape par étape comment passer un projet sur sbt, le faire grossir et l&#x27;automatiser.</p>\n<p>Partons d&#x27;un projet tout neuf, faisons le grossir et configurons-le pour sbt.</p>\n<p>Lors de ce parcours, sous forme de live coding, nous aborderons les points suivants :</p>\n<ul>\n<li>Bootstrap initial de sbt</li>\n<li>Utilisation basique en mode console</li>\n<li>Gestion des dépendances</li>\n<li>Tests unitaires</li>\n<li>Configuration multi-modules</li>\n<li>Utilisation de plugins</li>\n</ul>\n<p>J&#x27;espère qu&#x27;après ça, vous aussi construirez vos projets avec sbt !</p>\n","id":"OXD-4369","speakers":[{"name":"Francois Laroche","company":"Make.org","id":"5d2a911f2ad2384138cbc3c5471751fac7697824","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/5d2a911f2ad2384138cbc3c5471751fac7697824","rel":"https://cfp.scala.io/api/profile/speaker","title":"Francois Laroche"},"twitter":null}],"title":"Premiers pas avec sbt","lang":"fr","summary":"Voilà, j'ai du code scala que je souhaite partager avec l'équipe, maintenant, comment je fais ?\r\n\r\nSbt est devenu l'outil de build principal de scala, voyons étape par étape comment passer un projet sur sbt, le faire grossir et l'automatiser.\r\n\r\nPartons d'un projet tout neuf, faisons le grossir et configurons-le pour sbt.\r\n\r\nLors de ce parcours, sous forme de live coding, nous aborderons les points suivants :\r\n\r\n- Bootstrap initial de sbt\r\n- Utilisation basique en mode console\r\n- Gestion des dépendances\r\n- Tests unitaires\r\n- Configuration multi-modules\r\n- Utilisation de plugins\r\n\r\nJ'espère qu'après ça, vous aussi construirez vos projets avec sbt !"},{"talkType":"Hands-on Labs","track":"Scala & Ecosystem","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>The aim of this workshop is to get familiar with Akka Management Service Discovery using Kubernetes API, We will create a stateful distributed service with persistent entities via sharding in persistence mode.</p>\n<p>Required tools: <a href=\"https://www.scala-sbt.org/download.html\">Sbt</a>, <a href=\"https://docs.docker.com/install/\">Docker</a>, <a href=\"https://kubernetes.io/docs/tasks/tools/install-minikube/\">Minikube</a>, <a href=\"http://cassandra.apache.org/download/\">Cassandra</a></p>\n<p>Resources: <a href=\"https://github.com/jedossa/akka-cluster-k8s\">github.com/jedossa/akka-cluster-k8s</a></p>\n","id":"TRW-8164","speakers":[{"name":"Jeferson Ossa","company":"Seven4n","id":"72bb948056c2851f18899a37c0285185057854f5","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/72bb948056c2851f18899a37c0285185057854f5","rel":"https://cfp.scala.io/api/profile/speaker","title":"Jeferson Ossa"},"twitter":"@unyagami"}],"title":"Akka Cluster Management on Kubernetes","lang":"en","summary":"The aim of this workshop is to get familiar with Akka Management Service Discovery using Kubernetes API, We will create a stateful distributed service with persistent entities via sharding in persistence mode.\r\n\r\nRequired tools: [Sbt](https://www.scala-sbt.org/download.html), [Docker](https://docs.docker.com/install/), [Minikube](https://kubernetes.io/docs/tasks/tools/install-minikube/), [Cassandra](http://cassandra.apache.org/download/)\r\n\r\nResources: [github.com/jedossa/akka-cluster-k8s](https://github.com/jedossa/akka-cluster-k8s)"},{"talkType":"Hands-on Labs","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Vous avez entendu parler de ScalaJS ?\nVous pensez que le ticket d&#x27;entrée est trop élevé ?</p>\n<p>Venez briser la glace avec ce cas pratique, basé sur reactjs pour mettre les mains dans le cambouis notamment sur les éléments suivants :</p>\n<ul>\n<li>Construire son application et développer en Scala</li>\n<li>Créer des composants React avec ScalaJS</li>\n<li>Intéragir et réutiliser des composants JS existants</li>\n<li>Communiquer avec le backend</li>\n<li>Packager son application</li>\n</ul>\n<p>On vous attend nombreux !</p>\n","id":"ARU-0309","speakers":[{"name":"Colin Salmon-Legagneur","company":"Make.org","id":"9f5a9b60011a659b219d657bb8ba66aaff661519","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/9f5a9b60011a659b219d657bb8ba66aaff661519","rel":"https://cfp.scala.io/api/profile/speaker","title":"Colin Salmon-Legagneur"},"twitter":"@colin_sl"},{"name":"Francois Laroche","company":"Make.org","id":"5d2a911f2ad2384138cbc3c5471751fac7697824","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/5d2a911f2ad2384138cbc3c5471751fac7697824","rel":"https://cfp.scala.io/api/profile/speaker","title":"Francois Laroche"},"twitter":null}],"title":"ScalaJS + React = ♥","lang":"fr","summary":"Vous avez entendu parler de ScalaJS ?\r\nVous pensez que le ticket d'entrée est trop élevé ?\r\n\r\nVenez briser la glace avec ce cas pratique, basé sur reactjs pour mettre les mains dans le cambouis notamment sur les éléments suivants :\r\n\r\n- Construire son application et développer en Scala\r\n- Créer des composants React avec ScalaJS\r\n- Intéragir et réutiliser des composants JS existants\r\n- Communiquer avec le backend\r\n- Packager son application\r\n\r\nOn vous attend nombreux !"},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Lorsque vous venez du back, et que votre client souhaite utiliser Scala du back jusqu&#x27;au front, forcément, quelques questions se posent. Durant cette présentation, nous vous proposons un retour d&#x27;expérience, et la découverte d&#x27;une application très simple, pour vous permettre de tester Scala.JS, Scala.CSS et React dès la semaine prochaine sur votre projet</p>\n","id":"MLL-0165","speakers":[{"name":"Maude Cahuet","company":"Lunatech","id":"979b6dd5f00a1d476cdcc5fc15e44ac0595e7227","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/979b6dd5f00a1d476cdcc5fc15e44ac0595e7227","rel":"https://cfp.scala.io/api/profile/speaker","title":"Maude Cahuet"},"twitter":null},{"name":"Mark Gedik","company":"Lunatech","id":"769e616b2ecd78f2504ad5dacd7ed3d0e8cfcb9e","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/769e616b2ecd78f2504ad5dacd7ed3d0e8cfcb9e","rel":"https://cfp.scala.io/api/profile/speaker","title":"Mark Gedik"},"twitter":null},{"name":"Cédric Murer","company":"Lunatech","id":"6e360a00e152ca2b9eb58728716da680e743335a","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/6e360a00e152ca2b9eb58728716da680e743335a","rel":"https://cfp.scala.io/api/profile/speaker","title":"Cédric Murer"},"twitter":null}],"title":"Scala.js, Scala.CSS et React, l'histoire d'une découverte","lang":"fr","summary":"Lorsque vous venez du back, et que votre client souhaite utiliser Scala du back jusqu'au front, forcément, quelques questions se posent. Durant cette présentation, nous vous proposons un retour d'expérience, et la découverte d'une application très simple, pour vous permettre de tester Scala.JS, Scala.CSS et React dès la semaine prochaine sur votre projet"},{"talkType":"Conference","track":"Apprendre Scala","audienceLevel":"Débutant","summaryAsHtml":"<p>Tu ne comprends rien à la programmation fonctionnelle, au modèle Acteur, ou aux endofoncteurs ? Cela tombe bien, moi aussi ^^<br  />\nEnsemble, nous allons voir comment implémenter pas à pas une partie de BlackJack en Scala avec Akka.<br  />\nAu menu: sealed trait, pattern matching, options, futures, for/yield, map, flatmap, implicits, companion objects, paramètres optionnels, context.become et bien d’autres...</p>\n","id":"MEO-0435","speakers":[{"name":"Vincent Spiewak","company":"DailyBrain","id":"06d1807874cce958e36ffd9c140fae497bea841a","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/06d1807874cce958e36ffd9c140fae497bea841a","rel":"https://cfp.scala.io/api/profile/speaker","title":"Vincent Spiewak"},"twitter":"vspiewak"}],"title":"Gagner 1 Million au BlackJack avec Akka","lang":"fr","summary":"Tu ne comprends rien à la programmation fonctionnelle, au modèle Acteur, ou aux endofoncteurs ? Cela tombe bien, moi aussi ^^    \r\nEnsemble, nous allons voir comment implémenter pas à pas une partie de BlackJack en Scala avec Akka.     \r\nAu menu: sealed trait, pattern matching, options, futures, for/yield, map, flatmap, implicits, companion objects, paramètres optionnels, context.become et bien d’autres...\r\n"},{"talkType":"Conference","track":"Type & Functional Programming","audienceLevel":"Débutant","summaryAsHtml":"<p>La Theorie des Categories est très intimidante. Beaucoup de gens intelligents utilisent beaucoup de mots complexes pour en parler. Est-ce qu’on a besoin de la comprendre en tant que professionnel du code ?\nEn résumé, il s’agit de la branche la plus abstraite des mathématiques. Tellement abstraite que vous l’utilisez déjà probablement, sans le savoir, et que de nombreux théorèmes mathématiques que vous connaissez peuvent également être démontrés à l’aide des catégories.\nLe but de cette présentation est de montrer que, une fois qu’on a le bon vocabulaire, ce n’est pas si complexe. Nous verrons ensemble à quoi cela peut nous servir, dans le contexte de la programmation fonctionnel. Nous verrons également en quoi la conception en  théorie des catégories se rapproche de la conception que nous utilisons pour développer un logiciel.</p>\n","id":"MCU-3294","speakers":[{"name":"Emilien Pecoul (Ouarzy)","company":"Freelance (OWARE)","id":"2885db8a6bf282c1282b08d1ddea5d18fda0453c","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/2885db8a6bf282c1282b08d1ddea5d18fda0453c","rel":"https://cfp.scala.io/api/profile/speaker","title":"Emilien Pecoul (Ouarzy)"},"twitter":"@ouarzy"}],"title":"Theorie des Categories: vous la connaissez déjà.","lang":"fr","summary":"La Theorie des Categories est très intimidante. Beaucoup de gens intelligents utilisent beaucoup de mots complexes pour en parler. Est-ce qu’on a besoin de la comprendre en tant que professionnel du code ?\r\nEn résumé, il s’agit de la branche la plus abstraite des mathématiques. Tellement abstraite que vous l’utilisez déjà probablement, sans le savoir, et que de nombreux théorèmes mathématiques que vous connaissez peuvent également être démontrés à l’aide des catégories.\r\nLe but de cette présentation est de montrer que, une fois qu’on a le bon vocabulaire, ce n’est pas si complexe. Nous verrons ensemble à quoi cela peut nous servir, dans le contexte de la programmation fonctionnel. Nous verrons également en quoi la conception en  théorie des catégories se rapproche de la conception que nous utilisons pour développer un logiciel.\r\n"},{"talkType":"Conference","track":"BigData & MachineLearning","audienceLevel":"Débutant","summaryAsHtml":"<p>J&#x27;ai pénétré le monde de la data avec Spark.\nIl y a eu des moments clairement plus ou moins compliqués. Au début, c&#x27;était le Far West : un monde inconnu et dangereux (il ne fallait pas casser la production).</p>\n<p>Avec ce retour d&#x27;expérience, je vous propose de vous dire ce que j&#x27;aurais aimé qu&#x27;on me dise avant de me lancer. Je promets aussi de vous parler de ce que bien heureusement mes camarades plus expérimentés m&#x27;ont aussi donné comme astuces pour m&#x27;aider dans ce grand saut.</p>\n<p>Ce sera donc une entrée en matière dans le monde de Spark au travers de 7 conseils qui m&#x27;ont été ou m&#x27;auraient été bien pratiques pour démarrer.</p>\n","id":"TUE-7353","speakers":[{"name":"Nastasia Saby","company":"Zenika","id":"2ed6c77111efd7b94ada97cfe82c65dd35be7870","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/2ed6c77111efd7b94ada97cfe82c65dd35be7870","rel":"https://cfp.scala.io/api/profile/speaker","title":"Nastasia Saby"},"twitter":"@saby_nastasia"}],"title":"7 conseils pour démarrer avec Spark","lang":"fr","summary":"J'ai pénétré le monde de la data avec Spark.\r\nIl y a eu des moments clairement plus ou moins compliqués. Au début, c'était le Far West : un monde inconnu et dangereux (il ne fallait pas casser la production).\r\n\r\nAvec ce retour d'expérience, je vous propose de vous dire ce que j'aurais aimé qu'on me dise avant de me lancer. Je promets aussi de vous parler de ce que bien heureusement mes camarades plus expérimentés m'ont aussi donné comme astuces pour m'aider dans ce grand saut.\r\n\r\nCe sera donc une entrée en matière dans le monde de Spark au travers de 7 conseils qui m'ont été ou m'auraient été bien pratiques pour démarrer."},{"talkType":"Conference","track":"Type & Functional Programming","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>The protection of a user&#x27;s personal information is a fundamental right,</p>\n<p>That job will be done by data engineers team, right? They should protect a billion of data structures.\nIt sounds tedious!\nHow can we do that providing a high performance, with a maintainable, testable and clean code using functional programming approach, and in a reasonable time?</p>\n<p>Don’t worry, Matryoshka makes it possible to browse your data structures using recursion schemas approach, what if we use it directly in Spark columns to make it more performant?\nIt’s possible because we did it!</p>\n<p>Join us we will inspire you and reveal how we did it.</p>\n","id":"HVY-3960","speakers":[{"name":"Wiem Zine Elabidine","company":"Ebiznext","id":"62bc548066501b04134c3854908265cfe136c72e","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/62bc548066501b04134c3854908265cfe136c72e","rel":"https://cfp.scala.io/api/profile/speaker","title":"Wiem Zine Elabidine"},"twitter":"@WiemZin"},{"name":"Olivier Girardot","company":"Lateral Thoughts","id":"84def51f9abc0a89d195c0049287c67f0da2ae59","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/84def51f9abc0a89d195c0049287c67f0da2ae59","rel":"https://cfp.scala.io/api/profile/speaker","title":"Olivier Girardot"},"twitter":"@ogirardot"}],"title":"High performance Privacy By Design using Matryoshka and Spark","lang":"en","summary":"The protection of a user's personal information is a fundamental right, \r\n\r\nThat job will be done by data engineers team, right? They should protect a billion of data structures.\r\nIt sounds tedious! \r\nHow can we do that providing a high performance, with a maintainable, testable and clean code using functional programming approach, and in a reasonable time?\r\n\r\nDon’t worry, Matryoshka makes it possible to browse your data structures using recursion schemas approach, what if we use it directly in Spark columns to make it more performant? \r\nIt’s possible because we did it!\r\n\r\nJoin us we will inspire you and reveal how we did it."},{"talkType":"Conference","track":"BigData & MachineLearning","audienceLevel":"Débutant","summaryAsHtml":"<p>In spite of huge progress in Artificial Intelligence and Machine Learning over the past decade, building production ready enterprise scale machine learning platform is still hard.\nThere are many automated machine learning services for unstructured, homogenous data as for images, voice and language but when it comes to heterogeneous structured data choice very narrow.\nTransmogrifAI, an end to end automated machine learning workflow library for structured data build on Scala and SparkML. It enforces compile-time type-safety, modularity, and reuse. Through automation, It achieves accuracies close to hand-tuned models with almost 100x reduction in time. TransmogrifAI helps extensively to automate Machine learning model development to deployment cycle such as Feature Inference, Transformation, Automated Feature validation, Automated Model Selection, Hyperparameter Optimization.\nThis talk is intent to present :\nIntroduction to TransmogrifAI\nFeatures and end-to-end workflow automation cycle\nIntegration of TransmogrifAI with Scala and Spark based applications.\nUse cases.\nRef. https://github.com/salesforce/TransmogrifAI</p>\n","id":"ZYI-9174","speakers":[{"name":"Chetankumar Jyestaram Khatri","company":"Accionlabs Inc.","id":"6e05c48cbc2b7b80ee638448da6942e6d96b615b","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/6e05c48cbc2b7b80ee638448da6942e6d96b615b","rel":"https://cfp.scala.io/api/profile/speaker","title":"Chetankumar Jyestaram Khatri"},"twitter":"@khatri_chetan"}],"title":"TransmogrifAI - Automate Machine Learning Workflow with power of Scala and Spark at massive scale.","lang":"en","summary":"In spite of huge progress in Artificial Intelligence and Machine Learning over the past decade, building production ready enterprise scale machine learning platform is still hard.\r\nThere are many automated machine learning services for unstructured, homogenous data as for images, voice and language but when it comes to heterogeneous structured data choice very narrow.\r\nTransmogrifAI, an end to end automated machine learning workflow library for structured data build on Scala and SparkML. It enforces compile-time type-safety, modularity, and reuse. Through automation, It achieves accuracies close to hand-tuned models with almost 100x reduction in time. TransmogrifAI helps extensively to automate Machine learning model development to deployment cycle such as Feature Inference, Transformation, Automated Feature validation, Automated Model Selection, Hyperparameter Optimization. \r\nThis talk is intent to present :\r\nIntroduction to TransmogrifAI\r\nFeatures and end-to-end workflow automation cycle\r\nIntegration of TransmogrifAI with Scala and Spark based applications.\r\nUse cases.\r\nRef. https://github.com/salesforce/TransmogrifAI"},{"talkType":"Hands-on Labs","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Dans cet atelier de 3 heures, je vous propose de réaliser l&#x27;API REST d&#x27;un gestionnaire de tickets à l&#x27;aide d&#x27;akka-persistence.</p>\n<p>Comment :</p>\n<ul>\n<li>traduire un appel HTTP en commande,</li>\n<li>valider une commande et la convertir en évènement (ou pas),</li>\n<li>appliquer ces évènements sur l’état courant par le biais des lensers,</li>\n<li>faire évoluer nos évènements au grès des montées de version de nos application (event adapter),</li>\n<li>interroger l&#x27;état,</li>\n<li>publier le journal des évènements sur du websocket,</li>\n<li>répartir nos états au sein d’un cluster,</li>\n<li>monitorer le cluster et nous assurer de sa bonne santé</li>\n</ul>\n","id":"UEW-5629","speakers":[{"name":"Damien Gouyette","company":"Freelance","id":"f9fc65391600558c83fb666fc85b81b17a5d4e7c","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/f9fc65391600558c83fb666fc85b81b17a5d4e7c","rel":"https://cfp.scala.io/api/profile/speaker","title":"Damien Gouyette"},"twitter":"@cestpasdur"}],"title":"Akka-persistence sans les moufles","lang":"fr","summary":"Dans cet atelier de 3 heures, je vous propose de réaliser l'API REST d'un gestionnaire de tickets à l'aide d'akka-persistence.\r\n\r\nComment : \r\n\r\n- traduire un appel HTTP en commande, \r\n- valider une commande et la convertir en évènement (ou pas),\r\n- appliquer ces évènements sur l’état courant par le biais des lensers,\r\n- faire évoluer nos évènements au grès des montées de version de nos application (event adapter),\r\n- interroger l'état,\r\n- publier le journal des évènements sur du websocket,\r\n- répartir nos états au sein d’un cluster,\r\n- monitorer le cluster et nous assurer de sa bonne santé\r\n"},{"talkType":"Short conference","track":"BigData & MachineLearning","audienceLevel":"Débutant","summaryAsHtml":"<p>Dans le cadre de cette présentation, je ferais part de mon retour d’expérience sur la réalisation d’un Data Pipeline mettant en oeuvre Kafka Streams et Kafka Connect avec l’API Scala de Lightbend versus une expérience antérieure avec Spark Streaming.</p>\n<p>Afin de vous permettre de sélectionner le framework adapté à votre contexte, je présenterais, sur la base d’une solution de réchauffement de données développée dans ces deux technologies, les approches résolument différentes liées à l’utilisation de Kafka Streams / Kafka Connect et Spark Streaming dans les domaines :\n- Du développement\n- Du déploiement\n- De l’exécution\n- Du monitoring</p>\n","id":"AAU-7416","speakers":[{"name":"Abdelhamide EL ARIB","company":"Ebiznext","id":"3d8158b2f284f38cc861eb17326a20dc8eca6bfa","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/3d8158b2f284f38cc861eb17326a20dc8eca6bfa","rel":"https://cfp.scala.io/api/profile/speaker","title":"Abdelhamide EL ARIB"},"twitter":"@elarib29"}],"title":"Retour d’expérience Realtime Data Pipeline :  Kafka Streams / Kafka Connect versus Spark Streaming","lang":"fr","summary":"Dans le cadre de cette présentation, je ferais part de mon retour d’expérience sur la réalisation d’un Data Pipeline mettant en oeuvre Kafka Streams et Kafka Connect avec l’API Scala de Lightbend versus une expérience antérieure avec Spark Streaming.\r\n\r\nAfin de vous permettre de sélectionner le framework adapté à votre contexte, je présenterais, sur la base d’une solution de réchauffement de données développée dans ces deux technologies, les approches résolument différentes liées à l’utilisation de Kafka Streams / Kafka Connect et Spark Streaming dans les domaines :\r\n - Du développement\r\n - Du déploiement\r\n - De l’exécution\r\n - Du monitoring"},{"talkType":"Short conference","track":"Type & Functional Programming","audienceLevel":"Débutant","summaryAsHtml":"<p>Il existe déjà de nombreuses plateformes d&#x27;apprentissage de la programmation pour les enfants. Alors, en quoi CodeWorld serait-elle différente des autres?</p>\n<p>Si la plupart d&#x27;entre elles s&#x27;appuient sur le paradigme impératif, CodeWorld propose une approche purement fonctionnelle, basée sur une version simplifiée de Haskell. Bien que reflétant un aspect plus mathématique de la programmation, cette plateforme reste simple et ludique.</p>\n<p>Pendant cette présentation, différents concepts et possibilités offertes par CodeWorld seront présenté à l&#x27;aide d&#x27;exemples simples.</p>\n","id":"BKK-2213","speakers":[{"name":"Philippe Sam-Long","company":"Lizeo","id":"398848a7c63af269dda17d6cf646977f7f5f9b8a","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/398848a7c63af269dda17d6cf646977f7f5f9b8a","rel":"https://cfp.scala.io/api/profile/speaker","title":"Philippe Sam-Long"},"twitter":"@pulsati0n"}],"title":"CodeWorld : la programmation fonctionnelle pour les enfants","lang":"fr","summary":"Il existe déjà de nombreuses plateformes d'apprentissage de la programmation pour les enfants. Alors, en quoi CodeWorld serait-elle différente des autres?\r\n\r\nSi la plupart d'entre elles s'appuient sur le paradigme impératif, CodeWorld propose une approche purement fonctionnelle, basée sur une version simplifiée de Haskell. Bien que reflétant un aspect plus mathématique de la programmation, cette plateforme reste simple et ludique.\r\n\r\nPendant cette présentation, différents concepts et possibilités offertes par CodeWorld seront présenté à l'aide d'exemples simples."},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Since the first introduction of <a href=\"https://typelevel.org/cats-effect/\">Cats Effect</a> many things have changed taking its design and performance to a whole new level.</p>\n<p>Come join me and learn how to deal with side effects in a pure functional way while abstracting over the effect type and taking composition to the next level. We will review the most important features such as synchronous and asynchronous computations, error handling, safe resource management, concurrency, parallelism and cancellation starting by reviewing the basic concepts.</p>\n","id":"BGY-3027","speakers":[{"name":"Gabriel Volpe","company":"Paidy Inc","id":"09262a80e8a71508bdf1195985c239e711f2f86b","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/09262a80e8a71508bdf1195985c239e711f2f86b","rel":"https://cfp.scala.io/api/profile/speaker","title":"Gabriel Volpe"},"twitter":"@volpegabriel87"}],"title":"Cats Effect: The IO Monad for Scala","lang":"en","summary":"Since the first introduction of [Cats Effect](https://typelevel.org/cats-effect/) many things have changed taking its design and performance to a whole new level.\r\n\r\nCome join me and learn how to deal with side effects in a pure functional way while abstracting over the effect type and taking composition to the next level. We will review the most important features such as synchronous and asynchronous computations, error handling, safe resource management, concurrency, parallelism and cancellation starting by reviewing the basic concepts."},{"talkType":"Conference","track":"Apprendre Scala","audienceLevel":"Débutant","summaryAsHtml":"<p>J’entends parfois que Scala serait un langage « élitiste », destiné aux programmeurs familiers de la théorie des catégories, la programmation au niveau des types ou la programmation générique. Qu’est-ce que ce langage peut apporter à <em>tous les autres</em> programmeurs ? Qu’est-ce qu’il apporte aux entreprises dont l’objectif est avant tout de délivrer des fonctionnalités ?</p>\n<p>Je montrerai que Scala est non seulement accessible mais surtout bénéfique pour tous. En particulier, sa faculté à s’adapter aux spécificités de domaines métier aussi variés soient-ils permet d’exprimer plus directement la logique métier, conduisant à du code plus clair et simple. En outre, les principes élémentaires de programmation fonctionnelle facilitent le découpage de problèmes complexes en sous-problèmes indépendants et plus simples, et éliminent complètement certaines classes d’erreurs (telles que les erreurs d’intégration).</p>\n<p>Enfin, le fait que certains concepts ésotériques de programmation soient applicables en Scala n’est pas une menace mais une opportunité pour les programmeurs téméraires d’ajouter de nouvelles cordes à leur arc, s’ils le souhaitent.</p>\n","id":"PMA-8568","speakers":[{"name":"Julien Richard-Foy","company":"Scala Center","id":"6d57fb25680df058c3dea0eaeaac0a2dd352c87f","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/6d57fb25680df058c3dea0eaeaac0a2dd352c87f","rel":"https://cfp.scala.io/api/profile/speaker","title":"Julien Richard-Foy"},"twitter":"julienrf"}],"title":"Scala pour tous","lang":"fr","summary":"J’entends parfois que Scala serait un langage « élitiste », destiné aux programmeurs familiers de la théorie des catégories, la programmation au niveau des types ou la programmation générique. Qu’est-ce que ce langage peut apporter à *tous les autres* programmeurs ? Qu’est-ce qu’il apporte aux entreprises dont l’objectif est avant tout de délivrer des fonctionnalités ?\r\n\r\nJe montrerai que Scala est non seulement accessible mais surtout bénéfique pour tous. En particulier, sa faculté à s’adapter aux spécificités de domaines métier aussi variés soient-ils permet d’exprimer plus directement la logique métier, conduisant à du code plus clair et simple. En outre, les principes élémentaires de programmation fonctionnelle facilitent le découpage de problèmes complexes en sous-problèmes indépendants et plus simples, et éliminent complètement certaines classes d’erreurs (telles que les erreurs d’intégration).\r\n\r\nEnfin, le fait que certains concepts ésotériques de programmation soient applicables en Scala n’est pas une menace mais une opportunité pour les programmeurs téméraires d’ajouter de nouvelles cordes à leur arc, s’ils le souhaitent."},{"talkType":"Conference","track":"Type & Functional Programming","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>A dog is an animal, orders have lines of products and quantity, and multiple employees (who are also people) can work for a company. Modeling our business domain is one of the first things we do when approaching a project.</p>\n<p>In this session, we’ll discuss some static typing approaches to strengthen your domain model.</p>\n","id":"DTA-1163","speakers":[{"name":"Omer van Kloeten","company":"WeWork","id":"a8ca7b8b88e8bd3a36c67fbf93208fe9bea22a08","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/a8ca7b8b88e8bd3a36c67fbf93208fe9bea22a08","rel":"https://cfp.scala.io/api/profile/speaker","title":"Omer van Kloeten"},"twitter":"@omervk"}],"title":"Type Your Business","lang":"en","summary":"A dog is an animal, orders have lines of products and quantity, and multiple employees (who are also people) can work for a company. Modeling our business domain is one of the first things we do when approaching a project.\r\n\r\nIn this session, we’ll discuss some static typing approaches to strengthen your domain model."},{"talkType":"Conference","track":"Apprendre Scala","audienceLevel":"Débutant","summaryAsHtml":"<p>L&#x27;écriture de code dans quelque langage que ce soit implique le choix d&#x27;un style. Certains langages imposent ce style de façon plus ou moins stricte.</p>\n<p>Scala reste un langage ouvert de ce point de vue mais il existe des guides qui vous aideront a écrire du code maintenable dans le temps. Dans ce talk nous verrons ensemble les principaux éléments de ces guides de style et les techniques plus classique que vous pouvez utiliser pour ne pas transformer votre premier projet scala en cauchemar de maintenance. Nous verrons aussi comment Scala vous facilitera la tâche pour appliquer certaines de ces techniques.</p>\n","id":"CVX-5246","speakers":[{"name":"Jean Helou","company":"Codamens","id":"721968728a997294210e6c4d8ac72c0a93a81d1a","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/721968728a997294210e6c4d8ac72c0a93a81d1a","rel":"https://cfp.scala.io/api/profile/speaker","title":"Jean Helou"},"twitter":"@jeanhelou"}],"title":"Les contes des 1001 styles (de scala)","lang":"fr","summary":"L'écriture de code dans quelque langage que ce soit implique le choix d'un style. Certains langages imposent ce style de façon plus ou moins stricte. \r\n\r\nScala reste un langage ouvert de ce point de vue mais il existe des guides qui vous aideront a écrire du code maintenable dans le temps. Dans ce talk nous verrons ensemble les principaux éléments de ces guides de style et les techniques plus classique que vous pouvez utiliser pour ne pas transformer votre premier projet scala en cauchemar de maintenance. Nous verrons aussi comment Scala vous facilitera la tâche pour appliquer certaines de ces techniques."},{"talkType":"Hands-on Labs","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Discover how to develop a web application in ScalaJS. This talk is for Scala developers having a penchant for web development but rebuffed by JavaScript. It goes from ScalaJS basics to the implementation of a naive virtual DOM written in Scala. It presents:</p>\n<ul>\n<li>how to setup Sbt for cross compilation</li>\n<li>what is the DOM and how to manipulate it</li>\n<li>events and their propagation</li>\n<li>the Model/View/Update  architecture (a.k.a the ELM architecture)</li>\n</ul>\n<p>A preview of the game is available at chrilves.github.io/slimetrail .</p>\n","id":"PGM-9348","speakers":[{"name":"Christophe Calvès","company":"MFG Labs","id":"0257e3d8b10e0fae9ae649eb3000c8a823a58b11","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/0257e3d8b10e0fae9ae649eb3000c8a823a58b11","rel":"https://cfp.scala.io/api/profile/speaker","title":"Christophe Calvès"},"twitter":"@chrilves"}],"title":"How to make game in the browser thanks to ScalaJS","lang":"en","summary":"Discover how to develop a web application in ScalaJS. This talk is for Scala developers having a penchant for web development but rebuffed by JavaScript. It goes from ScalaJS basics to the implementation of a naive virtual DOM written in Scala. It presents:\r\n\r\n- how to setup Sbt for cross compilation\r\n- what is the DOM and how to manipulate it\r\n- events and their propagation\r\n- the Model/View/Update  architecture (a.k.a the ELM architecture)\r\n\r\nA preview of the game is available at chrilves.github.io/slimetrail ."},{"talkType":"Conference","track":"Type & Functional Programming","audienceLevel":"Débutant","summaryAsHtml":"<p>Dans le monde de la programmation fonctionnelle et des systèmes de types, on lit de plus en plus de documents en rapport avec les effets algébriques. Parfois ils sont encodés aux moyen de monades, comme en Idris ou PureScript (entre autres), parfois comme une construction du langage, par exemple dans les langages Koka ou Eff, parfois ils sont un mélanges des deux, comme les Joinades de F#. L&#x27;objectif de cette présentation est de survoler l&#x27;histoire et les implémentations reliées aux effets. De comprendre leurs raisons d&#x27;être, et de quelle manière ils ont étés intégrés dans nos langages favoris !</p>\n","id":"ZHX-6496","speakers":[{"name":"Xavier Van de Woestyne","company":"Margo Bank","id":"1a334bf9439b9d85f993c06d0eab8d74d1fa453d","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/1a334bf9439b9d85f993c06d0eab8d74d1fa453d","rel":"https://cfp.scala.io/api/profile/speaker","title":"Xavier Van de Woestyne"},"twitter":"@vdwxv"}],"title":"Initiation aux effets algébriques","lang":"fr","summary":"Dans le monde de la programmation fonctionnelle et des systèmes de types, on lit de plus en plus de documents en rapport avec les effets algébriques. Parfois ils sont encodés aux moyen de monades, comme en Idris ou PureScript (entre autres), parfois comme une construction du langage, par exemple dans les langages Koka ou Eff, parfois ils sont un mélanges des deux, comme les Joinades de F#. L'objectif de cette présentation est de survoler l'histoire et les implémentations reliées aux effets. De comprendre leurs raisons d'être, et de quelle manière ils ont étés intégrés dans nos langages favoris !"},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>The case for forking the Scala development toolchain - and the case against it. Scala has the reputation of being hard to write tooling for, yet it is a vital part of the development experience. I want to present an overview of existing tools from writing code to building, testing and deploying it, how they are lacking, where better solutions exist outside of Scala Land and how we can improve it.</p>\n","id":"KNV-1510","speakers":[{"name":"Justin Kaeser","company":"JetBrains","id":"de0a956a16b6587b63868893a2969dfde67f0ee0","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/de0a956a16b6587b63868893a2969dfde67f0ee0","rel":"https://cfp.scala.io/api/profile/speaker","title":"Justin Kaeser"},"twitter":"@ebenwert"}],"title":"Fork It Harder Make It Better","lang":"en","summary":"The case for forking the Scala development toolchain - and the case against it. Scala has the reputation of being hard to write tooling for, yet it is a vital part of the development experience. I want to present an overview of existing tools from writing code to building, testing and deploying it, how they are lacking, where better solutions exist outside of Scala Land and how we can improve it."},{"talkType":"Conference","track":"BigData & MachineLearning","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Let&#x27;s face it: most of the time our work is boring. We just glue stuff together and test if it doesn&#x27;t blow up. Where’s our promised fun in programming? Right, it’s in fun-ctional.</p>\n<p>Haha. No.</p>\n<p>Fun is when great things arise from humble beginnings. You write a small piece of code, run it, and see a complex pattern unfolding, which you almost-but-not-quite-yet understand. That’s intriguing. That’s what get your interest.</p>\n<p>Cellular Automata are like that. It&#x27;s a very universal model of computations, letting us predict weather, model animal behavior, or city traffic, as well as generate mathematical art. In fact, it’s even possible to simulate CA with other CA, and that’s a thing that always makes computer scientists super-excited. What’s also fun is that a cellular automaton (singular) is a little cute piece of immutable data to which we can apply a range of FP techniques in order to run complex simulations with very little of actual code writing. During this talk we’re going to do just that. We’ll start with some theory, and then move to generating visual patterns out of chaos. I promise that you won’t learn anything that is immediately useful, but - I hope - it will inspire you.</p>\n","id":"HGH-8102","speakers":[{"name":"Maciej Gorywoda","company":"Wire","id":"f030d99dced8397f97b6dffe0f706ad1d23b78f0","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/f030d99dced8397f97b6dffe0f706ad1d23b78f0","rel":"https://cfp.scala.io/api/profile/speaker","title":"Maciej Gorywoda"},"twitter":"@makingthematrix"}],"title":"Cellular Automata: How to become an artist with a few lines of code","lang":"en","summary":"Let's face it: most of the time our work is boring. We just glue stuff together and test if it doesn't blow up. Where’s our promised fun in programming? Right, it’s in fun-ctional. \r\n\r\nHaha. No.\r\n\r\nFun is when great things arise from humble beginnings. You write a small piece of code, run it, and see a complex pattern unfolding, which you almost-but-not-quite-yet understand. That’s intriguing. That’s what get your interest.\r\n\r\nCellular Automata are like that. It's a very universal model of computations, letting us predict weather, model animal behavior, or city traffic, as well as generate mathematical art. In fact, it’s even possible to simulate CA with other CA, and that’s a thing that always makes computer scientists super-excited. What’s also fun is that a cellular automaton (singular) is a little cute piece of immutable data to which we can apply a range of FP techniques in order to run complex simulations with very little of actual code writing. During this talk we’re going to do just that. We’ll start with some theory, and then move to generating visual patterns out of chaos. I promise that you won’t learn anything that is immediately useful, but - I hope - it will inspire you."},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Votre application web tourne-elle? est-elle rapide? Jusqu&#x27;à là...normal, mais combien d’utilisateurs sont connectés à ce moment là?  pouvez-vous donner un chiffre en mois d&#x27;une minute?\nVenez parler des modèles push et pull pour le monitoring d&#x27;applications, de kamon,  de prometheus et d&#x27;autres outils du genre.\nEt pour finir, on montrera l&#x27;intégration de prometheus dans une application Springboot pour envoyer des alertes sur des métriques sur Slack. Tout ça à l&#x27;intérieur des conteneurs Docker ... évidemment!.</p>\n","id":"FKH-6142","speakers":[{"name":"Fabian Gutierrez","company":"Fabernovel Technologies","id":"a6208a7048923c1beee531abfe7951f157917bae","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/a6208a7048923c1beee531abfe7951f157917bae","rel":"https://cfp.scala.io/api/profile/speaker","title":"Fabian Gutierrez"},"twitter":"@fabgutierr"}],"title":"Monitoring like a boss","lang":"fr","summary":"Votre application web tourne-elle? est-elle rapide? Jusqu'à là...normal, mais combien d’utilisateurs sont connectés à ce moment là?  pouvez-vous donner un chiffre en mois d'une minute?\r\nVenez parler des modèles push et pull pour le monitoring d'applications, de kamon,  de prometheus et d'autres outils du genre.\r\nEt pour finir, on montrera l'intégration de prometheus dans une application Springboot pour envoyer des alertes sur des métriques sur Slack. Tout ça à l'intérieur des conteneurs Docker ... évidemment!.\r\n"},{"talkType":"Conference","track":"BigData & MachineLearning","audienceLevel":"Débutant","summaryAsHtml":"<p>Cette présentation décrit notre retour d’expérience sur le développement d’un système de détection de fraude à la carte bancaire en temps réel, sous forte charge (temps de réponse &lt; 20 ms), résilient, monitoré et auto-apprenant.</p>\n<p>La possibilité d&#x27;enrayer les comportements frauduleux au moment même où ils se produisent est un besoin critique non seulement pour les entreprises, mais aussi pour leurs utilisateurs: en 2016, 800 millions d’euros ont été débités de manière frauduleuse en France.\nCe projet permet d’améliorer en continu le modèle d’apprentissage sur la base des transactions précédentes, puis de le rendre disponible sans interruption de service, afin de s’adapter aux évolutions des comportements frauduleux.</p>\n<p>Nous présenterons:</p>\n<ul>\n<li><p>Les patterns d’architecture temps-réel mis en oeuvre sur un système réactif bâti au dessus de Kafka, Akka-HTTP et Akka-Streams.</p>\n</li>\n<li><p>Les principaux challenges rencontrés et les solutions mises en oeuvre.</p>\n</li>\n<li><p>Les atouts apportés par l’utilisation de Scala.</p>\n</li>\n<li><p>Les axes d’améliorations des futures versions</p>\n</li>\n</ul>\n<p>Ce talk intéressera en particulier les équipes susceptibles de rencontrer des besoins d’apprentissage en temps réel dans des systèmes réactifs.</p>\n","id":"HPB-0470","speakers":[{"name":"Aurélie Salmon","company":"Ebiznext","id":"40b97ceafa5eea5d7e54637147524c5575ac6cb3","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/40b97ceafa5eea5d7e54637147524c5575ac6cb3","rel":"https://cfp.scala.io/api/profile/speaker","title":"Aurélie Salmon"},"twitter":"@aurelie__salmon"},{"name":"Martin Menestret","company":"Ebiznext","id":"254818777c3f0350d7dff903a44ac35b3c8faa6f","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/254818777c3f0350d7dff903a44ac35b3c8faa6f","rel":"https://cfp.scala.io/api/profile/speaker","title":"Martin Menestret"},"twitter":"@mmenestret"}],"title":"Retour d’expérience sur la réalisation d’un système de détection de fraude auto-apprenant et temps réel.","lang":"fr","summary":"Cette présentation décrit notre retour d’expérience sur le développement d’un système de détection de fraude à la carte bancaire en temps réel, sous forte charge (temps de réponse < 20 ms), résilient, monitoré et auto-apprenant.\r\n\r\nLa possibilité d'enrayer les comportements frauduleux au moment même où ils se produisent est un besoin critique non seulement pour les entreprises, mais aussi pour leurs utilisateurs: en 2016, 800 millions d’euros ont été débités de manière frauduleuse en France.\r\nCe projet permet d’améliorer en continu le modèle d’apprentissage sur la base des transactions précédentes, puis de le rendre disponible sans interruption de service, afin de s’adapter aux évolutions des comportements frauduleux.\r\n\r\nNous présenterons:\r\n\r\n* Les patterns d’architecture temps-réel mis en oeuvre sur un système réactif bâti au dessus de Kafka, Akka-HTTP et Akka-Streams.\r\n\r\n* Les principaux challenges rencontrés et les solutions mises en oeuvre.\r\n\r\n* Les atouts apportés par l’utilisation de Scala.\r\n\r\n* Les axes d’améliorations des futures versions\r\n\r\nCe talk intéressera en particulier les équipes susceptibles de rencontrer des besoins d’apprentissage en temps réel dans des systèmes réactifs."},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Akka Cluster is a powerful toolkit for building distributed applications. But as always, power comes with a price. Special care needs to be taken during bootstrapping, network partitions and gracefully stopping a cluster.</p>\n<p>In this talk, Markus introduces the Akka Management CoordinatedShutdown and Akka Split Brain Resolver modules and demonstrates on a running Kubernetes cluster how these libraries can help to manage an Akka Cluster in production. Join us when you want to know how a stateful application can handle rolling deployments without downtime and without losing in-flight requests and how it can safely recover from network partitions.</p>\n","id":"MVO-7186","speakers":[{"name":"Markus Jura","company":"MOIA","id":"ae0ceb7a5f46f56f98ea6c0a74330f00cdc36b58","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/ae0ceb7a5f46f56f98ea6c0a74330f00cdc36b58","rel":"https://cfp.scala.io/api/profile/speaker","title":"Markus Jura"},"twitter":"@markusjura"}],"title":"Managing an Akka Cluster on Kubernetes","lang":"en","summary":"Akka Cluster is a powerful toolkit for building distributed applications. But as always, power comes with a price. Special care needs to be taken during bootstrapping, network partitions and gracefully stopping a cluster.\r\n\r\nIn this talk, Markus introduces the Akka Management CoordinatedShutdown and Akka Split Brain Resolver modules and demonstrates on a running Kubernetes cluster how these libraries can help to manage an Akka Cluster in production. Join us when you want to know how a stateful application can handle rolling deployments without downtime and without losing in-flight requests and how it can safely recover from network partitions."},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Cette présentation s&#x27;adresse à tous ceux qui veulent découvrir Akka, un framework qui permet de créer des applications plus stables, plus performantes, et massivement scalables.</p>\n<p>Nous verrons à travers des exemples concrets comment le modèle d&#x27;acteurs d&#x27;Akka nous permet d&#x27;éviter les comportements inattendus dans nos applications, d&#x27;exploiter pleinement la puissance des machines, et de créer des applications distribuées en réseau pour des performances et une stabilité accrues.</p>\n<p>Cette présentation ne nécessite aucune connaissance préalable sur Akka, ni une connaissance avancée du langage. A la fin de la présentation, vous devriez avoir une idée précise de l&#x27;utilité d&#x27;Akka, et des bases concrètes pour continuer votre apprentissage.</p>\n<p><strong>À propos du speaker</strong></p>\n<p>J&#x27;ai personnellement commencé à utiliser Akka il y a un peu plus d&#x27;un an, lorsque j&#x27;étais lead developer dans un startup. Nous avions des exigences de performance et de scalabilité élevées pour notre application. Intégrer progressivement Scala et Akka dans notre stack nous a permis d&#x27;atteindre nos objectifs là ou la précédente solution (sur node.js) ne convenait pas.</p>\n","id":"FBT-2157","speakers":[{"name":"Guillaume Bogard","company":"Linkvalue","id":"3d5625c93bbfeed7433fb6f8a7d9fbcbe6d19c5a","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/3d5625c93bbfeed7433fb6f8a7d9fbcbe6d19c5a","rel":"https://cfp.scala.io/api/profile/speaker","title":"Guillaume Bogard"},"twitter":null}],"title":"Introduction aux acteurs Akka : concurrence et systèmes distribués pour la JVM","lang":"fr","summary":"Cette présentation s'adresse à tous ceux qui veulent découvrir Akka, un framework qui permet de créer des applications plus stables, plus performantes, et massivement scalables.\r\n\r\nNous verrons à travers des exemples concrets comment le modèle d'acteurs d'Akka nous permet d'éviter les comportements inattendus dans nos applications, d'exploiter pleinement la puissance des machines, et de créer des applications distribuées en réseau pour des performances et une stabilité accrues.\r\n\r\nCette présentation ne nécessite aucune connaissance préalable sur Akka, ni une connaissance avancée du langage. A la fin de la présentation, vous devriez avoir une idée précise de l'utilité d'Akka, et des bases concrètes pour continuer votre apprentissage.\r\n\r\n**À propos du speaker**\r\n\r\nJ'ai personnellement commencé à utiliser Akka il y a un peu plus d'un an, lorsque j'étais lead developer dans un startup. Nous avions des exigences de performance et de scalabilité élevées pour notre application. Intégrer progressivement Scala et Akka dans notre stack nous a permis d'atteindre nos objectifs là ou la précédente solution (sur node.js) ne convenait pas."},{"talkType":"Conference","track":"Type & Functional Programming","audienceLevel":"Débutant","summaryAsHtml":"<p>Si un de vos collègue vous a déjà dit «Alors là, j&#x27;ai utilisé de l&#x27;application partielle sur cette fonction que j&#x27;ai curryfiée en utilisant des fonctions d&#x27;ordre supérieur et des closures» et que vous n&#x27;avez rien compris, alors ce talk est pour vous.</p>\n<p>La programmation fonctionnelle présente de nombreux concepts qui viennent des maths. Et cela fait peur ! Mais appliqué à l&#x27;informatique, c&#x27;est en réalité très simple !</p>\n<p>Durant ce live-coding consistant à refactorer un code impératif vers un code fonctionel, les concepts principaux seront introduits uniquement quand cela est utile et expliqués en profondeur.</p>\n<p>À la fin de ce talk, les concepts suivants n&#x27;auront plus de secrets pour vous :</p>\n<ul>\n<li>La transparance référenciel</li>\n<li>Les fonctions comme citoyen de première classe</li>\n<li>Les fonctions d&#x27;ordre supérieur</li>\n<li>Les closure</li>\n<li>Le lambda calculus</li>\n<li>La curryfication</li>\n<li>L&#x27;application partielle</li>\n<li>La composition de fonction</li>\n<li>La notation «Point-free»</li>\n</ul>\n","id":"ZOT-5278","speakers":[{"name":"Xavier Detant","company":"Zenika","id":"993866bc342bf12c77710caa8f302b8cd90405ec","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/993866bc342bf12c77710caa8f302b8cd90405ec","rel":"https://cfp.scala.io/api/profile/speaker","title":"Xavier Detant"},"twitter":"@XDetant"}],"title":"Tout ce que vous avez toujours voulus savoir sur la programmation fonctionnelle sans jamais oser le demander","lang":"fr","summary":"Si un de vos collègue vous a déjà dit «Alors là, j'ai utilisé de l'application partielle sur cette fonction que j'ai curryfiée en utilisant des fonctions d'ordre supérieur et des closures» et que vous n'avez rien compris, alors ce talk est pour vous.\r\n\r\nLa programmation fonctionnelle présente de nombreux concepts qui viennent des maths. Et cela fait peur ! Mais appliqué à l'informatique, c'est en réalité très simple !\r\n\r\nDurant ce live-coding consistant à refactorer un code impératif vers un code fonctionel, les concepts principaux seront introduits uniquement quand cela est utile et expliqués en profondeur.\r\n\r\nÀ la fin de ce talk, les concepts suivants n'auront plus de secrets pour vous :\r\n\r\n- La transparance référenciel\r\n- Les fonctions comme citoyen de première classe\r\n- Les fonctions d'ordre supérieur\r\n- Les closure\r\n- Le lambda calculus\r\n- La curryfication\r\n- L'application partielle\r\n- La composition de fonction\r\n- La notation «Point-free»"},{"talkType":"Hands-on Labs","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Why just attend conferences, when you can be a speaker yourself? Everyone in the developer community has something to contribute. You too can be a jet-setting thought leader, no matter your background or level of experience. It&#x27;s only a matter of practice and persistence—and learning how to write an awesome proposal for when those CFPs are announced! In this friendly and supportive workshop, you&#x27;ll brainstorm and design a winning conference proposal from the ground up. Even if you have no idea what you would ever speak about to your colleagues, come and discover just how much you do have to share as well as the best way to share it. You&#x27;ll leave with new and unexpected ideas for talks, the confidence to pursue them, and the momentum you need to move from the audience to the podium.</p>\n","id":"HBA-1735","speakers":[{"name":"Steven Syrek","company":"Blacklane GmbH","id":"d508c2d5da820b87221c78611dfa9f1b095cd492","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/d508c2d5da820b87221c78611dfa9f1b095cd492","rel":"https://cfp.scala.io/api/profile/speaker","title":"Steven Syrek"},"twitter":"@sjsyrek"}],"title":"You do the talking: learn how to write better so you can speak more","lang":"en","summary":"Why just attend conferences, when you can be a speaker yourself? Everyone in the developer community has something to contribute. You too can be a jet-setting thought leader, no matter your background or level of experience. It's only a matter of practice and persistence—and learning how to write an awesome proposal for when those CFPs are announced! In this friendly and supportive workshop, you'll brainstorm and design a winning conference proposal from the ground up. Even if you have no idea what you would ever speak about to your colleagues, come and discover just how much you do have to share as well as the best way to share it. You'll leave with new and unexpected ideas for talks, the confidence to pursue them, and the momentum you need to move from the audience to the podium."},{"talkType":"Conference","track":"BigData & MachineLearning","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Here at Spotify, we use Scio, an open-source Scala framework, to develop data pipelines and deploy them on Google Dataflow.</p>\n<p>Since the very beginning of “Big Data”, serialization and deserialization of classes have always been one of the hardest problem. In Scio 0.7.0 we’ve worked hard to improve the serialization of classes shuffled between workers.</p>\n<p>We’ll see in this talk how we managed to significantly improve serialization predictability and efficiency while preserving developer productivity by leveraging Scala macros and Jon Pretty “Magnolia”. We’ll also see how those tools can be used not only to scrap boilerplate, but also to provide clear and helpful insights to developers on how they can improve serialization and save resources.</p>\n","id":"OKK-3159","speakers":[{"name":"Julien Tournay","company":"Spotify","id":"182f268bed57d819b156b952abbb72ff1e0b1c8f","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/182f268bed57d819b156b952abbb72ff1e0b1c8f","rel":"https://cfp.scala.io/api/profile/speaker","title":"Julien Tournay"},"twitter":"@skaalf"}],"title":"Better, faster, stronger Coder. Improving data processing @Spotify","lang":"en","summary":"Here at Spotify, we use Scio, an open-source Scala framework, to develop data pipelines and deploy them on Google Dataflow. \r\n\r\nSince the very beginning of “Big Data”, serialization and deserialization of classes have always been one of the hardest problem. In Scio 0.7.0 we’ve worked hard to improve the serialization of classes shuffled between workers. \r\n\r\nWe’ll see in this talk how we managed to significantly improve serialization predictability and efficiency while preserving developer productivity by leveraging Scala macros and Jon Pretty “Magnolia”. We’ll also see how those tools can be used not only to scrap boilerplate, but also to provide clear and helpful insights to developers on how they can improve serialization and save resources.\r\n"},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Benchmarking scala code seems trivial, but there are plenty of hidden problems and pitfalls on a way to a proper and reliable performance measurement. But code optimization is not just about comparing numbers, it’s about answering tough questions:</p>\n<ul>\n<li>Why is this code so slow?</li>\n<li>What’s happening under the hood?</li>\n<li>How can you make it run faster?</li>\n</ul>\n<p>This talk is going to show you the price of high-level abstractions in Scala, discussing ways to measure performance, required tooling and typical mistakes. During the talk we’ll get our hands dirty with a simple but real-world problem, unveiling a full spectre of performance issues and solving them one by one.</p>\n","id":"CDR-1931","speakers":[{"name":"Roman Grebennikov","company":"Findify","id":"88c281ed083dacc8af5ae40d633b9b977e4fd339","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/88c281ed083dacc8af5ae40d633b9b977e4fd339","rel":"https://cfp.scala.io/api/profile/speaker","title":"Roman Grebennikov"},"twitter":"@public_void_grv"}],"title":"Make your scala code faster","lang":"en","summary":"Benchmarking scala code seems trivial, but there are plenty of hidden problems and pitfalls on a way to a proper and reliable performance measurement. But code optimization is not just about comparing numbers, it’s about answering tough questions: \r\n\r\n* Why is this code so slow?\r\n* What’s happening under the hood?\r\n* How can you make it run faster?\r\n\r\nThis talk is going to show you the price of high-level abstractions in Scala, discussing ways to measure performance, required tooling and typical mistakes. During the talk we’ll get our hands dirty with a simple but real-world problem, unveiling a full spectre of performance issues and solving them one by one."},{"talkType":"Hands-on Labs","track":"Apprendre Scala","audienceLevel":"Débutant","summaryAsHtml":"<p>Ce workshop accessible à tous vous permettra de découvrir le langage étapes par étapes guidé par des tests unitaires qui échouent et que vous devez résoudre.</p>\n<p>Chaque test est accompagné de commentaires expliquant les détails de la fonctionnalité du langage qui est testée.</p>\n<p>Pour ceux qui connaissent un peu le langage, le workshop vous contient des exercices vous permettant d&#x27;approfondir différents concepts.</p>\n<p>En sortant du workshop vous aurez les bases de la syntaxe pour comprendre les conférences des deux jours suivants et vous mettre à scala en rentrant au bureau après le pont !</p>\n","id":"GCN-1434","speakers":[{"name":"Jean Helou","company":"Codamens","id":"721968728a997294210e6c4d8ac72c0a93a81d1a","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/721968728a997294210e6c4d8ac72c0a93a81d1a","rel":"https://cfp.scala.io/api/profile/speaker","title":"Jean Helou"},"twitter":"@jeanhelou"},{"name":"Jonathan Winandy","company":null,"id":"009d1cc4049517a15c9aad9d662c807916dc6bb7","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/009d1cc4049517a15c9aad9d662c807916dc6bb7","rel":"https://cfp.scala.io/api/profile/speaker","title":"Jonathan Winandy"},"twitter":null}],"title":"Dans s'cas là mettons les mains dans le code ","lang":"fr","summary":"Ce workshop accessible à tous vous permettra de découvrir le langage étapes par étapes guidé par des tests unitaires qui échouent et que vous devez résoudre. \r\n\r\nChaque test est accompagné de commentaires expliquant les détails de la fonctionnalité du langage qui est testée.\r\n\r\nPour ceux qui connaissent un peu le langage, le workshop vous contient des exercices vous permettant d'approfondir différents concepts.\r\n\r\nEn sortant du workshop vous aurez les bases de la syntaxe pour comprendre les conférences des deux jours suivants et vous mettre à scala en rentrant au bureau après le pont !"},{"talkType":"Hands-on Labs","track":"Apprendre Scala","audienceLevel":"Débutant","summaryAsHtml":"<p>Mixter is a workshop initially designed to teach code based agility through DDD/CQRS/ES.s It is also a great exercise to practice scala on an almost real use case.</p>\n<p>This workshop guides you step by step using failing tests and a thoughtful code organisation.  Studying the project&#x27;s structure, design and  tests,  making the latter pass will hopefully yield insights on how to design an object oriented implementation in scala, and might convince you that DDD is instrumental to a nice design :)</p>\n","id":"JIS-0245","speakers":[{"name":"Jean Helou","company":"Codamens","id":"721968728a997294210e6c4d8ac72c0a93a81d1a","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/721968728a997294210e6c4d8ac72c0a93a81d1a","rel":"https://cfp.scala.io/api/profile/speaker","title":"Jean Helou"},"twitter":"@jeanhelou"},{"name":"Emilien Pecoul (Ouarzy)","company":"Freelance (OWARE)","id":"2885db8a6bf282c1282b08d1ddea5d18fda0453c","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/2885db8a6bf282c1282b08d1ddea5d18fda0453c","rel":"https://cfp.scala.io/api/profile/speaker","title":"Emilien Pecoul (Ouarzy)"},"twitter":"@ouarzy"},{"name":"Florent Pellet","company":"HackYourJob","id":"16752746d3b8bf93ab0346c1b1eaf474995b45c5","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/16752746d3b8bf93ab0346c1b1eaf474995b45c5","rel":"https://cfp.scala.io/api/profile/speaker","title":"Florent Pellet"},"twitter":"@florentpellet"}],"title":"Mixter scala : Implement  CQRS/ES from scratch","lang":"en","summary":"Mixter is a workshop initially designed to teach code based agility through DDD/CQRS/ES.s It is also a great exercise to practice scala on an almost real use case. \r\n\r\nThis workshop guides you step by step using failing tests and a thoughtful code organisation.  Studying the project's structure, design and  tests,  making the latter pass will hopefully yield insights on how to design an object oriented implementation in scala, and might convince you that DDD is instrumental to a nice design :)"},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Scala est une language de programmation avec de nombreuses qualités, mais aussi une grande quantité de bizarreries et choses qui ne sont comportent pas exactement comme on pourrait s&#x27;y attendre.</p>\n<p>Cette présentation traite des pièges les plus courants et des méthodes que nous utilisons pour les contourner. Beaucoup sont considérés comme évidents et donc jamais réellement discutés - c&#x27;est à direque la pluspart des développeurs Scala apprennent leur existence en tombant dedans.</p>\n<p>Le but de cette présentation est de tenter de mettre les pièges les plus fréquents du language en avant et, on espère, de sauver quelques victimes potentielles.</p>\n","id":"YJM-8545","speakers":[{"name":"Nicolas Rinaudo","company":"Besedo","id":"385f6ea7416d56cec557888e7ccc75984fe74ef2","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/385f6ea7416d56cec557888e7ccc75984fe74ef2","rel":"https://cfp.scala.io/api/profile/speaker","title":"Nicolas Rinaudo"},"twitter":"@NicolasRinaudo"}],"title":"Scala Best Practices I Wish Someone'd Told Me About","lang":"fr","summary":"Scala est une language de programmation avec de nombreuses qualités, mais aussi une grande quantité de bizarreries et choses qui ne sont comportent pas exactement comme on pourrait s'y attendre.\r\n\r\nCette présentation traite des pièges les plus courants et des méthodes que nous utilisons pour les contourner. Beaucoup sont considérés comme évidents et donc jamais réellement discutés - c'est à direque la pluspart des développeurs Scala apprennent leur existence en tombant dedans.\r\n\r\nLe but de cette présentation est de tenter de mettre les pièges les plus fréquents du language en avant et, on espère, de sauver quelques victimes potentielles."},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p><a href=\"http://graphql.org\">GraphQL</a> provides an alternative to the REST API with a high emphasis on efficient data retrieval, introspection, and documentation with a powerful type system behind it. After its initial introduction by Facebook, it gained a lot of momentum and now used in production by companies like GitHub, Twitter, Medium, Coursera, The New York Times.</p>\n<p>In this talk, I would like to give an introduction to <a href=\"http://graphql.org\">GraphQL</a> and <a href=\"http://sangria-graphql.org\">Sangria</a>, the scala GraphQL implementation. You will learn the core concepts behind GraphQL as well as how to build your own GraphQL API with scala and integrate it into your existing services. We will also discuss more advanced concepts like schema modeling, auth and security, efficient data loading and solving the N+1 problem.</p>\n","id":"NDS-2827","speakers":[{"name":"Oleg Ilyenko","company":null,"id":"a30924b588a47c7bdce1b2ba60483308e9a58812","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/a30924b588a47c7bdce1b2ba60483308e9a58812","rel":"https://cfp.scala.io/api/profile/speaker","title":"Oleg Ilyenko"},"twitter":"@easyangel"}],"title":"Building GraphQL API with Sangria","lang":"en","summary":"[GraphQL](http://graphql.org) provides an alternative to the REST API with a high emphasis on efficient data retrieval, introspection, and documentation with a powerful type system behind it. After its initial introduction by Facebook, it gained a lot of momentum and now used in production by companies like GitHub, Twitter, Medium, Coursera, The New York Times.\r\n\r\nIn this talk, I would like to give an introduction to [GraphQL](http://graphql.org) and [Sangria](http://sangria-graphql.org), the scala GraphQL implementation. You will learn the core concepts behind GraphQL as well as how to build your own GraphQL API with scala and integrate it into your existing services. We will also discuss more advanced concepts like schema modeling, auth and security, efficient data loading and solving the N+1 problem."},{"talkType":"Conference","track":"Other Languages","audienceLevel":"Débutant","summaryAsHtml":"<p>On entend parler de Haskell de plus en plus, mais il parait souvent bien compliqué de se lancer. Haskell fait peur, avec ses Monades, Monoïdes et autres gros mots.</p>\n<p>On verra ensemble que vous n&#x27;avez absolument pas besoin de savoir ce que ces termes signifient pour vous lancer. Je vous propose de regarder ce dont vous aurez besoin pour créer une petite API, avec de la sécurité et de la gestion de données, soit de quoi mettre une petite application en prod.</p>\n","id":"PZW-8790","speakers":[{"name":"Céline Louvet","company":"Fairvioo","id":"e33c0b56dadbafe71853e8b59f6ba42c3744f311","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/e33c0b56dadbafe71853e8b59f6ba42c3744f311","rel":"https://cfp.scala.io/api/profile/speaker","title":"Céline Louvet"},"twitter":"@celine_louvet"}],"title":"Votre mission ? Découvrir Haskell et le mettre en prod","lang":"fr","summary":"On entend parler de Haskell de plus en plus, mais il parait souvent bien compliqué de se lancer. Haskell fait peur, avec ses Monades, Monoïdes et autres gros mots.\r\n\r\nOn verra ensemble que vous n'avez absolument pas besoin de savoir ce que ces termes signifient pour vous lancer. Je vous propose de regarder ce dont vous aurez besoin pour créer une petite API, avec de la sécurité et de la gestion de données, soit de quoi mettre une petite application en prod."},{"talkType":"Conference","track":"Type & Functional Programming","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>“… most if not all constructions in category theory are parametric in the underlying category, resulting in a remarkable economy of expression. Perhaps, we should spend more time and effort into utilising this economy for programming. This possibly leads to a new style of programming, which could be loosely dubbed as <em>category-parametric programming</em>.” —Ralf Hinze, <em>Adjoint Folds and Unfolds</em></p>\n<p>There is a lot of talk about Category Theory in the world of functional programming. However, it can be quite confusing to figure out which parts of it can be applied directly in your work, and which parts are a bit more hand-wavy. I’ll introduce everything we need from category theory and we’ll discuss what you can take advantage of in Scala as well as which aspects create some tension with Scala ergonomics. You should leave this talk with some more clarity in design decisions and some new things to consider when deciding what approach makes the most sense in various situations.</p>\n","id":"BWN-4751","speakers":[{"name":"Greg Pfeil","company":"Formation","id":"c05bab944a277ecb7f00207f04a3c2bdfd970559","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/c05bab944a277ecb7f00207f04a3c2bdfd970559","rel":"https://cfp.scala.io/api/profile/speaker","title":"Greg Pfeil"},"twitter":"sellout"}],"title":"Category-parametric Programming","lang":"en","summary":"“… most if not all constructions in category theory are parametric in the underlying category, resulting in a remarkable economy of expression. Perhaps, we should spend more time and effort into utilising this economy for programming. This possibly leads to a new style of programming, which could be loosely dubbed as _category-parametric programming_.” —Ralf Hinze, _Adjoint Folds and Unfolds_\r\n\r\nThere is a lot of talk about Category Theory in the world of functional programming. However, it can be quite confusing to figure out which parts of it can be applied directly in your work, and which parts are a bit more hand-wavy. I’ll introduce everything we need from category theory and we’ll discuss what you can take advantage of in Scala as well as which aspects create some tension with Scala ergonomics. You should leave this talk with some more clarity in design decisions and some new things to consider when deciding what approach makes the most sense in various situations.\r\n"},{"talkType":"Short conference","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>During the last 5 years, I’ve participated in different enterprise software projects based on Scala ecosystem. All of them were greenfield projects which allowed us to try different architectural and design approaches to deliver the products being built.\nThis is an experience report about our transition from Java to Scala, how we overcame the challenges that comes from switching paradigms and how we decided to start doing FP as a better way to tackle complexity. At the end, I will show our reference architecture as an artifact to distribute all those new knowledge and to demonstrate how to use functional patterns in a real µ-service.</p>\n","id":"TOX-4454","speakers":[{"name":"Jeferson Ossa","company":"Seven4n","id":"72bb948056c2851f18899a37c0285185057854f5","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/72bb948056c2851f18899a37c0285185057854f5","rel":"https://cfp.scala.io/api/profile/speaker","title":"Jeferson Ossa"},"twitter":"@unyagami"}],"title":"Functional Design for Reference Architectures","lang":"en","summary":"During the last 5 years, I’ve participated in different enterprise software projects based on Scala ecosystem. All of them were greenfield projects which allowed us to try different architectural and design approaches to deliver the products being built.\r\nThis is an experience report about our transition from Java to Scala, how we overcame the challenges that comes from switching paradigms and how we decided to start doing FP as a better way to tackle complexity. At the end, I will show our reference architecture as an artifact to distribute all those new knowledge and to demonstrate how to use functional patterns in a real µ-service."},{"talkType":"Conference","track":"Type & Functional Programming","audienceLevel":"Débutant","summaryAsHtml":"<p>As Scala developers, it is not uncommon to find ourselves struggling against the compiler. And although the compiler tries to communicate with us, the result can be both incomprehensible and one-sided.</p>\n<p>In this beginner-friendly talk, we will see how we can improve things by sharing our thoughts with the compiler - be it by using more descriptive types, leveraging implicits, or even churning out some macros. By this simple act of sharing, we can elevate our relationship with the compiler into a meaningful, and hopefully productive, dialog.</p>\n","id":"AAA-9118","speakers":[{"name":"Daniel Beskin","company":null,"id":"f2a7decb6f64976410ad208746c17bd274fd1259","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/f2a7decb6f64976410ad208746c17bd274fd1259","rel":"https://cfp.scala.io/api/profile/speaker","title":"Daniel Beskin"},"twitter":null}],"title":"Sharing Is Caring - How to Let the Compiler Know What You're Thinking","lang":"en","summary":"As Scala developers, it is not uncommon to find ourselves struggling against the compiler. And although the compiler tries to communicate with us, the result can be both incomprehensible and one-sided. \r\n\r\nIn this beginner-friendly talk, we will see how we can improve things by sharing our thoughts with the compiler - be it by using more descriptive types, leveraging implicits, or even churning out some macros. By this simple act of sharing, we can elevate our relationship with the compiler into a meaningful, and hopefully productive, dialog."},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>SGANARELLE\n— Maître, mandez-moi n’importe quoi à faire. Je le ferai peut-être, à mon aise</p>\n<p>DOM JUAN\n— Réponds-moi donc ce que tu voudras, je ferai comme si c’était la réponse que j’attendais</p>\n<p>DONE ELVIRE\n— ClassCastException(« oui, je vois bien que vous ne m’y attendiez pas »)</p>\n<p>Tu apprécies  Scala parce que c’est typé ? Tu as découvert avec horreur que les acteurs Akka reçoivent  Any et renvoient Unit ? Tout n’est pas perdu, Akka-Typed arrive à la rescousse. On présentera cette évolution majeure du framework, ce qu’il apporte (des types !), et ce qui lui manque.</p>\n","id":"VMJ-9127","speakers":[{"name":"Cyrille Chépélov","company":"Transparency Rights Management","id":"b3078693011bf3ae1fa0c197c6e59cf23a7f23f8","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/b3078693011bf3ae1fa0c197c6e59cf23a7f23f8","rel":"https://cfp.scala.io/api/profile/speaker","title":"Cyrille Chépélov"},"twitter":"@c_chep"},{"name":"Sylvain Veyrié","company":"Transparency Rights Management","id":"2d809da647eee11716b01ffd461d22b32f04e890","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2018/speakers/2d809da647eee11716b01ffd461d22b32f04e890","rel":"https://cfp.scala.io/api/profile/speaker","title":"Sylvain Veyrié"},"twitter":null}],"title":"Akka Typed : pour que le typage fort ne reste pas lettre morte","lang":"fr","summary":"SGANARELLE\r\n\t— Maître, mandez-moi n’importe quoi à faire. Je le ferai peut-être, à mon aise\r\n\r\nDOM JUAN\r\n\t— Réponds-moi donc ce que tu voudras, je ferai comme si c’était la réponse que j’attendais\r\n\r\nDONE ELVIRE\r\n— ClassCastException(« oui, je vois bien que vous ne m’y attendiez pas »)\r\n\r\nTu apprécies  Scala parce que c’est typé ? Tu as découvert avec horreur que les acteurs Akka reçoivent  Any et renvoient Unit ? Tout n’est pas perdu, Akka-Typed arrive à la rescousse. On présentera cette évolution majeure du framework, ce qu’il apporte (des types !), et ce qui lui manque.\r\n\r\n"}]