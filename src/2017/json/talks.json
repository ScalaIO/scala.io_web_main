[{"talkType":"Keynote","track":"BigData & MachineLearning","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Big data started with an emphasis on batch-oriented architectures, where data is captured and then processed using batch jobs. To extract information faster, new <em>Fast data</em> architectures are emerging to process data streams as it arrives.</p>\n<p>Microservices are inherently message driven, a principle of <a href=\"http://www.reactivemanifesto.org/\">Reactive Systems</a>. Hence, they are also &quot;stream&quot; oriented.</p>\n<p>The trendy word &quot;stream&quot; is used in both spheres, because both process never-ending sequences of data. Other design problems and solutions are similar. I&#x27;ll argue that data-centric and microservice architectures are actually converging.</p>\n<p>Next I&#x27;ll dive into the specific concerns for streaming data services:</p>\n<ul>\n<li>Low latency: How low?</li>\n<li>High volume: How high?</li>\n<li>Data processing: Filtering, transforming, or what? In bulk or as individual events?</li>\n<li>Integration with other tools: Which ones and how?</li>\n</ul>\n<p>Finally, I&#x27;ll examine four streaming tools and how they address these concerns: Spark, Flink, Akka Streams, and Kafka Streams. I&#x27;ll also discuss the role of Kafka as the data backplane and microservice toolkits for other services.</p>\n","id":"HRU-3689","speakers":[{"name":"Dean Wampler","company":"Lightbend","id":"86f5428eb8d215f4b9efec130ab79ad9dd034d5d","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/86f5428eb8d215f4b9efec130ab79ad9dd034d5d","rel":"https://cfp.scala.io/api/profile/speaker","title":"Dean Wampler"},"twitter":"@deanwampler"}],"title":"Stream All the Things!","lang":"en","summary":"Big data started with an emphasis on batch-oriented architectures, where data is captured and then processed using batch jobs. To extract information faster, new _Fast data_ architectures are emerging to process data streams as it arrives.\r\n\r\nMicroservices are inherently message driven, a principle of [Reactive Systems](http://www.reactivemanifesto.org/). Hence, they are also \"stream\" oriented.\r\n\r\nThe trendy word \"stream\" is used in both spheres, because both process never-ending sequences of data. Other design problems and solutions are similar. I'll argue that data-centric and microservice architectures are actually converging.\r\n\r\nNext I'll dive into the specific concerns for streaming data services:\r\n\r\n* Low latency: How low?\r\n* High volume: How high?\r\n* Data processing: Filtering, transforming, or what? In bulk or as individual events?\r\n* Integration with other tools: Which ones and how?\r\n\r\nFinally, I'll examine four streaming tools and how they address these concerns: Spark, Flink, Akka Streams, and Kafka Streams. I'll also discuss the role of Kafka as the data backplane and microservice toolkits for other services.\r\n"},{"talkType":"Conference","track":"Other Languages","audienceLevel":"Débutant","summaryAsHtml":"<p>En partant du code F# du kata Trivia (porté d&#x27;un langage objet manifestement), l&#x27;objectif est :\n* de montrer des techniques de refactoring vers un style plus fonctionnel (types sum/product, immutabilité, currying...)\n* d&#x27;introduire le langage F# en style objet et en style fonctionnel</p>\n<p>Cet atelier sera entièrement mené en live-coding. Aucun pré-requis en F# n&#x27;est nécessaire, des explications sur le langage seront fournies au fur et à mesure.</p>\n","id":"HMJ-8304","speakers":[{"name":"Clément Bouillier","company":"DevCrafting","id":"daf04616676dada0d68606ee8fd710d94f08d551","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/daf04616676dada0d68606ee8fd710d94f08d551","rel":"https://cfp.scala.io/api/profile/speaker","title":"Clément Bouillier"},"twitter":"@clem_bouillier"}],"title":"Refactoring vers un style plus fonctionnel en F#","lang":"fr","summary":"En partant du code F# du kata Trivia (porté d'un langage objet manifestement), l'objectif est :\r\n* de montrer des techniques de refactoring vers un style plus fonctionnel (types sum/product, immutabilité, currying...)\r\n* d'introduire le langage F# en style objet et en style fonctionnel\r\n\r\nCet atelier sera entièrement mené en live-coding. Aucun pré-requis en F# n'est nécessaire, des explications sur le langage seront fournies au fur et à mesure."},{"talkType":"Conference","track":"Type & Functional Programming","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>One might think that the bleak, anti-utopian reality of Orwell&#x27;s 1984 would be a poor choice for a source of constructive ideas about programming. But it so happens, that the three main slogans of the book: &quot;War is Peace&quot;, &quot;Freedom is Slavery&quot; and &quot;Ignorance is Strength&quot; map very neatly into good practices for programming in general and functional programming in particular.</p>\n<p>In this talk, we will delve into this connection and see how we can leverage the spirit of the slogans to arrive at well known techniques from the world of strongly-typed functional programming. Driven by concrete code examples we will see how to battle effects, choose the right abstractions for the task at hand and use parametricity to guide us to the correct implementation.</p>\n","id":"GVY-0062","speakers":[{"name":"Daniel Beskin","company":null,"id":"f2a7decb6f64976410ad208746c17bd274fd1259","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/f2a7decb6f64976410ad208746c17bd274fd1259","rel":"https://cfp.scala.io/api/profile/speaker","title":"Daniel Beskin"},"twitter":null}],"title":"What Orwell's 1984 Can Teach Us about Programming","lang":"en","summary":"One might think that the bleak, anti-utopian reality of Orwell's 1984 would be a poor choice for a source of constructive ideas about programming. But it so happens, that the three main slogans of the book: \"War is Peace\", \"Freedom is Slavery\" and \"Ignorance is Strength\" map very neatly into good practices for programming in general and functional programming in particular.\r\n\r\nIn this talk, we will delve into this connection and see how we can leverage the spirit of the slogans to arrive at well known techniques from the world of strongly-typed functional programming. Driven by concrete code examples we will see how to battle effects, choose the right abstractions for the task at hand and use parametricity to guide us to the correct implementation."},{"talkType":"Quickie","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>At HomeAway we strive to automate marketing processes systems using Scala. One of the many challenges we faced concerns the automation of data feeds to our marketing partners, with the purpose of optimizing our dynamic advertising revenue. We’ll take a look at the problems posed by this task, and how Reactive Streams and Akka Streams have played a key role in solving them.</p>\n","id":"FCY-5292","speakers":[{"name":"Stefano Bonetti","company":"HomeAway UK","id":"f7218ac3bf9cdc0b71305a081704167a8eeaec1b","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/f7218ac3bf9cdc0b71305a081704167a8eeaec1b","rel":"https://cfp.scala.io/api/profile/speaker","title":"Stefano Bonetti"},"twitter":"@svez_faz"}],"title":"Cracking marketing automation with Reactive Streams","lang":"en","summary":"At HomeAway we strive to automate marketing processes systems using Scala. One of the many challenges we faced concerns the automation of data feeds to our marketing partners, with the purpose of optimizing our dynamic advertising revenue. We’ll take a look at the problems posed by this task, and how Reactive Streams and Akka Streams have played a key role in solving them."},{"talkType":"Quickie","track":"BigData & MachineLearning","audienceLevel":"Débutant","summaryAsHtml":"<p>Apache Beam est un modèle de programmation unifié pour la création de pipeline de traitement de données de type batch et de type streaming.</p>\n<p>Je vous propose une présentation de Scio, une API Scala de haut niveau développée par Spotify. Nous verrons des cas d&#x27;utilisation réels de votre machine vers Cloud Google Platform.</p>\n","id":"STD-9803","speakers":[{"name":"Alick PAUL","company":"Ippon","id":"7869cf3acf0e37e2971f7917338fbf3215324416","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/7869cf3acf0e37e2971f7917338fbf3215324416","rel":"https://cfp.scala.io/api/profile/speaker","title":"Alick PAUL"},"twitter":"@alickonrails"}],"title":"Apache Beam et Google DataFlow IRL avec Scala Scio","lang":"fr","summary":"Apache Beam est un modèle de programmation unifié pour la création de pipeline de traitement de données de type batch et de type streaming.\r\n\r\nJe vous propose une présentation de Scio, une API Scala de haut niveau développée par Spotify. Nous verrons des cas d'utilisation réels de votre machine vers Cloud Google Platform."},{"talkType":"Conference","track":"Other Languages","audienceLevel":"Débutant","summaryAsHtml":"<p>J&#x27;étais un développeur Scala heureux et une proposition que je n&#x27;ai pas pu refuser m&#x27;a ramené dans l&#x27;écosystème Java. Je vous propose de partager un petit bilan de tout ce qui me manque cruellement ou me perturbe au quotidien, mais également ce que j&#x27;étais finalement pas si mécontent de retrouver!</p>\n","id":"PXU-0046","speakers":[{"name":"Brice LEPORINI","company":"Freelance","id":"108a8a63f261caa8a0f55470bdb5cca65c7abdf8","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/108a8a63f261caa8a0f55470bdb5cca65c7abdf8","rel":"https://cfp.scala.io/api/profile/speaker","title":"Brice LEPORINI"},"twitter":"@blep"}],"title":"10 choses que ressent un développeur Scala qui revient à Java, la 8è va vous étonner!","lang":"fr","summary":"J'étais un développeur Scala heureux et une proposition que je n'ai pas pu refuser m'a ramené dans l'écosystème Java. Je vous propose de partager un petit bilan de tout ce qui me manque cruellement ou me perturbe au quotidien, mais également ce que j'étais finalement pas si mécontent de retrouver! "},{"talkType":"Short conference","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>The Scala - Android relationship is not an easy one. If you ever tried to set up an Android project using SBT you probably have your own bittersweet story about it to tell. At Wire we have one as well.</p>\n<p>Wire is an end-to-end encrypted secure team messenger, focused on safe communication and user-friendly interface. It works on Android and also on iOS, macOS, Windows, Linux, and in web browsers. About a year ago we started migrating from the usual Java/Android architecture to the Scala one. This talk will discuss the benefits and challenges of switching to Scala, and what the architecture of the Wire app on Android looks like.</p>\n","id":"DHZ-1053","speakers":[{"name":"Maciej Gorywoda","company":"@wireapp ","id":"0d78954414ecba9b87dec483d69585c44ed4a6fe","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/0d78954414ecba9b87dec483d69585c44ed4a6fe","rel":"https://cfp.scala.io/api/profile/speaker","title":"Maciej Gorywoda"},"twitter":"@makingthematrix"}],"title":"Scala on Wire","lang":"en","summary":"The Scala - Android relationship is not an easy one. If you ever tried to set up an Android project using SBT you probably have your own bittersweet story about it to tell. At Wire we have one as well.\r\n\r\nWire is an end-to-end encrypted secure team messenger, focused on safe communication and user-friendly interface. It works on Android and also on iOS, macOS, Windows, Linux, and in web browsers. About a year ago we started migrating from the usual Java/Android architecture to the Scala one. This talk will discuss the benefits and challenges of switching to Scala, and what the architecture of the Wire app on Android looks like."},{"talkType":"Short conference","track":"Scala & Ecosystem","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Alpakka is a community project providing akka stream connectors to different backends (mqtt, cassandra, hbase ...). I will show how it is easy to implement back pressured connector for Akka Stream to read and write from/to Apache Geode.</p>\n<p>I&#x27;ll try to encourage you to contribute to Alpakka project as it is an easy step and a really pleasant experience - thanks to reviewers.</p>\n","id":"BAF-2775","speakers":[{"name":"Olivier NOUGUIER","company":"TabMo","id":"b781fe404324b0c1d7d67a82b0cfca87cd67a473","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/b781fe404324b0c1d7d67a82b0cfca87cd67a473","rel":"https://cfp.scala.io/api/profile/speaker","title":"Olivier NOUGUIER"},"twitter":"@oNouguier"}],"title":"Alpakka project contributor xp","lang":"fr","summary":"Alpakka is a community project providing akka stream connectors to different backends (mqtt, cassandra, hbase ...). I will show how it is easy to implement back pressured connector for Akka Stream to read and write from/to Apache Geode. \r\n\r\nI'll try to encourage you to contribute to Alpakka project as it is an easy step and a really pleasant experience - thanks to reviewers. "},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Purely functional Scala code needs something like Haskell&#x27;s IO monad—a construct that allows functional programs to interact with external, effectful systems in a referentially transparent way. To date, most effect systems for Scala have fallen into one of two categories: pure, but slow or inexpressive; or fast and expressive, but impure and unprincipled. In this talk, John A. De Goes, the architect of Scalaz 8’s new effect system, introduces a novel solution that’s up to 100x faster than Future and Cats Effect, in a principled, modular design that ships with all the powerful primitives necessary for building complex, real-world, high-performance, concurrent functional programs.</p>\n<p>Thanks to built-in concurrency, high performance, lawful semantics, and rich expressivity, Scalaz 8&#x27;s effect system may just be the effect system to attract the mainstream Scala developers who aren&#x27;t familiar with functional programming.</p>\n","id":"XHU-3219","speakers":[{"name":"John A. De Goes","company":"SlamData, Inc.","id":"d5930854ab683d4bfd1efd2cdc6d648827ebc998","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/d5930854ab683d4bfd1efd2cdc6d648827ebc998","rel":"https://cfp.scala.io/api/profile/speaker","title":"John A. De Goes"},"twitter":"@jdegoes"}],"title":"The Design of the Scalaz 8 Effect System","lang":"fr","summary":"Purely functional Scala code needs something like Haskell's IO monad—a construct that allows functional programs to interact with external, effectful systems in a referentially transparent way. To date, most effect systems for Scala have fallen into one of two categories: pure, but slow or inexpressive; or fast and expressive, but impure and unprincipled. In this talk, John A. De Goes, the architect of Scalaz 8’s new effect system, introduces a novel solution that’s up to 100x faster than Future and Cats Effect, in a principled, modular design that ships with all the powerful primitives necessary for building complex, real-world, high-performance, concurrent functional programs. \r\n\r\nThanks to built-in concurrency, high performance, lawful semantics, and rich expressivity, Scalaz 8's effect system may just be the effect system to attract the mainstream Scala developers who aren't familiar with functional programming."},{"talkType":"Short conference","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Si vous êtes intimidés par scalaz, cats, shapeless and co, venez découvrir la librairie Hamsters (https://github.com/scala-hamsters/hamsters).</p>\n<p>Les features proposées  par Hamsters sont principalement les suivantes :</p>\n<ul>\n<li>Validation</li>\n<li>Enum typeclass</li>\n<li>Monad transformers</li>\n<li>HLists</li>\n<li>Union types</li>\n</ul>\n<p>Nous parlerons des principes se trouvant derrière cette librairie et expliquerons comment l&#x27;utiliser avec des exemples.</p>\n","id":"DHJ-6654","speakers":[{"name":"Loïc Descotte","company":"Kelkoo","id":"35a71298c1ba3df85d78c96000fa1d935d0a0b30","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/35a71298c1ba3df85d78c96000fa1d935d0a0b30","rel":"https://cfp.scala.io/api/profile/speaker","title":"Loïc Descotte"},"twitter":"loic_d"},{"name":"Damien Gouyette","company":"Freelance","id":"f9fc65391600558c83fb666fc85b81b17a5d4e7c","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/f9fc65391600558c83fb666fc85b81b17a5d4e7c","rel":"https://cfp.scala.io/api/profile/speaker","title":"Damien Gouyette"},"twitter":"@cestpasdur"}],"title":"Hamsters :  Une mini lib d'utilitaires Scala, compatible avec les débutants en programmation fonctionnelle. ","lang":"fr","summary":"Si vous êtes intimidés par scalaz, cats, shapeless and co, venez découvrir la librairie Hamsters (https://github.com/scala-hamsters/hamsters). \r\n\r\nLes features proposées  par Hamsters sont principalement les suivantes : \r\n\r\n-  Validation\r\n-  Enum typeclass\r\n-  Monad transformers\r\n-  HLists\r\n-  Union types\r\n\r\nNous parlerons des principes se trouvant derrière cette librairie et expliquerons comment l'utiliser avec des exemples. "},{"talkType":"Quickie","track":"Type & Functional Programming","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Comment la programmation fonctionnelle peut m&#x27;aider à accéder à ma donnée?\nTour d&#x27;horizon d&#x27;une implémentation avec Cats et Shapeless.</p>\n","id":"RRA-8668","speakers":[{"name":"Romain Lecomte","company":"TabMO","id":"2a45b21532efa242504cd4d409d03ad6be1692c4","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/2a45b21532efa242504cd4d409d03ad6be1692c4","rel":"https://cfp.scala.io/api/profile/speaker","title":"Romain Lecomte"},"twitter":"@lebalifant"}],"title":"Un DSL pour ma base de données NoSQL","lang":"fr","summary":"Comment la programmation fonctionnelle peut m'aider à accéder à ma donnée?\r\nTour d'horizon d'une implémentation avec Cats et Shapeless."},{"talkType":"Quickie","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>I am working at Emarsys, building our own product - a b2c marketing cloud toolset - and 2 years ago we started a pilot project with scala. We had no scala developers in this time, so our enthusiastic php developers switch to scala and solve the challenges. After this we evangelized scala and the functional programming paradigms, and right now we have 2 teams and more than 10 projects based on scala as well as we still recruiting scala developers. This is a hard issue because in Hungary just a few companies that work with this language. I would like to talk about this 2 years,</p>\n<p>how we spread the world inhouse about scala,\nhow we get new and new projects\nhow we solve our recruitment challenges\nhow we retain our quality</p>\n<p>and I have some other topics as well, but I think this is the core of my talk, I have to mentioned that, I gave a 5 minutes ignite talk in Chicago 2017 April 20th about this topic, so this should be a longer version</p>\n<p>http://event.scaladays.org/scaladays-chicago-2017#!#schedulePopupExtras-8174</p>\n","id":"HTW-2575","speakers":[{"name":"Tamas puski","company":"emarsys && iseeq ","id":"4d2f8d0703148789e54c030ec2625eca1b86b999","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/4d2f8d0703148789e54c030ec2625eca1b86b999","rel":"https://cfp.scala.io/api/profile/speaker","title":"Tamas puski"},"twitter":"@tpuski"}],"title":"Scale up calm down @ emarsys - How we build Scala teams ","lang":"en","summary":"I am working at Emarsys, building our own product - a b2c marketing cloud toolset - and 2 years ago we started a pilot project with scala. We had no scala developers in this time, so our enthusiastic php developers switch to scala and solve the challenges. After this we evangelized scala and the functional programming paradigms, and right now we have 2 teams and more than 10 projects based on scala as well as we still recruiting scala developers. This is a hard issue because in Hungary just a few companies that work with this language. I would like to talk about this 2 years, \r\n \r\nhow we spread the world inhouse about scala, \r\nhow we get new and new projects\r\nhow we solve our recruitment challenges\r\nhow we retain our quality\r\n \r\nand I have some other topics as well, but I think this is the core of my talk, I have to mentioned that, I gave a 5 minutes ignite talk in Chicago 2017 April 20th about this topic, so this should be a longer version\r\n \r\nhttp://event.scaladays.org/scaladays-chicago-2017#!#schedulePopupExtras-8174\r\n"},{"talkType":"Conference","track":"Other Languages","audienceLevel":"Débutant","summaryAsHtml":"<p>Chez Clever Cloud, il s&#x27;est passé un truc bizarre : tout le monde s&#x27;est mis à coder en rust, petit à petit. Beaucoup de nouveaux projets sont démarrés en rust. Ce n&#x27;est pas pour autant qu&#x27;on a arrêté de coder en java, en scala, en ruby (et même un peu en haskell et go). En tant que CTO, comment je fais pour maitriser la complexité et l&#x27;explosion du nombre de langages ? Comment je choisis quels langages seront utilisés pour quels projets? Est-ce que je laisse les autres choisir?</p>\n<p>Petit tour d&#x27;horizon des langages qu&#x27;on utilise, avec un focus sur scala et rust, leur complémentarité en termes de fonctionnel, leurs ressemblances sur la programmation fonctionnelle.</p>\n","id":"KIH-0216","speakers":[{"name":"Clément Delafargue","company":"Clever Cloud","id":"ad36032dfb473504555950435795ac48292b8a09","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/ad36032dfb473504555950435795ac48292b8a09","rel":"https://cfp.scala.io/api/profile/speaker","title":"Clément Delafargue"},"twitter":"@clementd"}],"title":"Au secours, toute mon équipe s'est mise à coder en Rust","lang":"fr","summary":"Chez Clever Cloud, il s'est passé un truc bizarre : tout le monde s'est mis à coder en rust, petit à petit. Beaucoup de nouveaux projets sont démarrés en rust. Ce n'est pas pour autant qu'on a arrêté de coder en java, en scala, en ruby (et même un peu en haskell et go). En tant que CTO, comment je fais pour maitriser la complexité et l'explosion du nombre de langages ? Comment je choisis quels langages seront utilisés pour quels projets? Est-ce que je laisse les autres choisir?\r\n\r\nPetit tour d'horizon des langages qu'on utilise, avec un focus sur scala et rust, leur complémentarité en termes de fonctionnel, leurs ressemblances sur la programmation fonctionnelle."},{"talkType":"Hands-on Labs","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Talk is cheap - show me the code! Get hands on with Lagom and Scala in this 3h workshop.\nDuring which, we will use Scala to build a system based on Lagom microservices. We will persist data using Event Sourcing / CQRS, and introduce common patterns in microservice development, such as the circuit breaker. We will explore the aspects of scalability and resilience in our system, including pitfalls. At the end of this workshop participants should have a good understanding of how to build a system based on Lagom, and of some common concepts in microservice development.</p>\n","id":"SHA-1686","speakers":[{"name":"Lutz Huehnken","company":"Independent","id":"169f6bba6a92afb2460fa168ea81991262cf933d","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/169f6bba6a92afb2460fa168ea81991262cf933d","rel":"https://cfp.scala.io/api/profile/speaker","title":"Lutz Huehnken"},"twitter":"@lutzhuehnken"}],"title":"Lagom Microservice Workshop","lang":"en","summary":"Talk is cheap - show me the code! Get hands on with Lagom and Scala in this 3h workshop. \r\nDuring which, we will use Scala to build a system based on Lagom microservices. We will persist data using Event Sourcing / CQRS, and introduce common patterns in microservice development, such as the circuit breaker. We will explore the aspects of scalability and resilience in our system, including pitfalls. At the end of this workshop participants should have a good understanding of how to build a system based on Lagom, and of some common concepts in microservice development.\r\n"},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>This talk consists of a comprehensive walkthrough of the microservices pattern with Akka and Cassandra. It reviews the three primary aspects to consider when developing scalable microservices:\n- Separating functionality in Microservices\n- Cloning nodes\n- Data partitioning</p>\n<p>For our purposes, the talk will mainly focus on this third aspect of leveraging Akka and Cassandra to achieve scalable microservices through proper data partitioning.</p>\n<p>The Microservices Pattern is on the top of the wave nowadays. Knowing its fundamentals, and how Akka can help on this approach is highly valuable to any developer who is currently involved, or will be in the future, with high volumes of data, and will open the door to creating a more resilient and robust application.</p>\n","id":"RNB-1586","speakers":[{"name":"Fran Perez","company":"47 Degrees","id":"f7d2ed8b683db569cb2630d352de3923c3747ddb","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/f7d2ed8b683db569cb2630d352de3923c3747ddb","rel":"https://cfp.scala.io/api/profile/speaker","title":"Fran Perez"},"twitter":"@FPerezP"}],"title":"The three paths of Scaling with Akka.","lang":"en","summary":"This talk consists of a comprehensive walkthrough of the microservices pattern with Akka and Cassandra. It reviews the three primary aspects to consider when developing scalable microservices:\r\n- Separating functionality in Microservices\r\n- Cloning nodes\r\n- Data partitioning\r\n\r\nFor our purposes, the talk will mainly focus on this third aspect of leveraging Akka and Cassandra to achieve scalable microservices through proper data partitioning.\r\n\r\nThe Microservices Pattern is on the top of the wave nowadays. Knowing its fundamentals, and how Akka can help on this approach is highly valuable to any developer who is currently involved, or will be in the future, with high volumes of data, and will open the door to creating a more resilient and robust application."},{"talkType":"Short conference","track":"Type & Functional Programming","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>When trying to write functional programs we often run into situations where the implementation of the algorithm that uses destructive mutation is much more efficient than the version that uses immutable values. In this talk we’ll look at one specific data structure: a tree, and look at a tool (zippers) that allow you to mutate and grow the tree while avoiding destructive mutation and remaining efficient. We will then talk about how zippers can be generalized to any data structure and JSON trees in particular.</p>\n","id":"XJB-8953","speakers":[{"name":"Ratan Sebastian","company":"commercetools","id":"d5a9fccc9e5b71263f9639179c702b68dc2982eb","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/d5a9fccc9e5b71263f9639179c702b68dc2982eb","rel":"https://cfp.scala.io/api/profile/speaker","title":"Ratan Sebastian"},"twitter":"@ratansebastian"}],"title":"Editing Trees with Zippers","lang":"en","summary":"When trying to write functional programs we often run into situations where the implementation of the algorithm that uses destructive mutation is much more efficient than the version that uses immutable values. In this talk we’ll look at one specific data structure: a tree, and look at a tool (zippers) that allow you to mutate and grow the tree while avoiding destructive mutation and remaining efficient. We will then talk about how zippers can be generalized to any data structure and JSON trees in particular."},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p><a href=\"http://dotty.epfl.ch/\">Dotty</a> est un compilateur expérimental pour Scala destiné à  devenir Scala 3. Pour être utilisable au quotidien, il est essentiel qu&#x27;un compilateur soit accompagné d&#x27;une panoplie d&#x27;outils: REPL, générateur de documentation, et bien sur IDEs. En général, cette dernière partie est la plus complexe: intégrer un IDE avec un compilateur nécessite de bien comprendre le fonctionnement des deux parties, et tout le travail est à refaire pour supporter d&#x27;autres IDEs. Heureusement, il existe aujourd&#x27;hui un protocole standardisant la communication entre un IDE et un compilateur: le <a href=\"https://github.com/Microsoft/language-server-protocol\">Language Server Protocol</a>. Dans cette présentation, je détaillerai comment nous avons développer le support pour IDE dans Dotty en utilisant le LSP et quelles sont nos projets pour rendre le développement interactif dans Dotty encore plus agréable et riche en fonctionnalités.</p>\n","id":"EPC-5900","speakers":[{"name":"Guillaume Martres","company":"EPFL Scala Team","id":"8297dfb4da0c45beda15634c8e58cdfe1b8639eb","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/8297dfb4da0c45beda15634c8e58cdfe1b8639eb","rel":"https://cfp.scala.io/api/profile/speaker","title":"Guillaume Martres"},"twitter":null}],"title":"Le développement interactif avec Dotty","lang":"fr","summary":"[Dotty](http://dotty.epfl.ch/) est un compilateur expérimental pour Scala destiné à  devenir Scala 3. Pour être utilisable au quotidien, il est essentiel qu'un compilateur soit accompagné d'une panoplie d'outils: REPL, générateur de documentation, et bien sur IDEs. En général, cette dernière partie est la plus complexe: intégrer un IDE avec un compilateur nécessite de bien comprendre le fonctionnement des deux parties, et tout le travail est à refaire pour supporter d'autres IDEs. Heureusement, il existe aujourd'hui un protocole standardisant la communication entre un IDE et un compilateur: le [Language Server Protocol](https://github.com/Microsoft/language-server-protocol). Dans cette présentation, je détaillerai comment nous avons développer le support pour IDE dans Dotty en utilisant le LSP et quelles sont nos projets pour rendre le développement interactif dans Dotty encore plus agréable et riche en fonctionnalités."},{"talkType":"Conference","track":"Type & Functional Programming","audienceLevel":"Débutant","summaryAsHtml":"<p>Programming is math and math is programming. But the kind of math that&#x27;s useful in programming is not what they teach you in school. In fact it&#x27;s much more interesting. Category theory seems to be esoteric when presented by mathematicians, because all their examples come from other branches of mathematics. But when you use examples from programming, things suddenly becomes quite obvious. And the reason there is such a close fit between category theory and programming is quite simple: both are built on the principle of composability.</p>\n","id":"THX-0846","speakers":[{"name":"Bartosz Milewski","company":"Reliable Software","id":"b0a8b77ff5e95548e00b5526660c6ab8264addb7","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/b0a8b77ff5e95548e00b5526660c6ab8264addb7","rel":"https://cfp.scala.io/api/profile/speaker","title":"Bartosz Milewski"},"twitter":"@bartoszmilewski"}],"title":"A Crash Course in Category Theory","lang":"en","summary":"Programming is math and math is programming. But the kind of math that's useful in programming is not what they teach you in school. In fact it's much more interesting. Category theory seems to be esoteric when presented by mathematicians, because all their examples come from other branches of mathematics. But when you use examples from programming, things suddenly becomes quite obvious. And the reason there is such a close fit between category theory and programming is quite simple: both are built on the principle of composability. "},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>We all love Scala, but the one aspect we have a hard time accepting are long compile times. It’s not uncommon for a project to experience compilation times of a handful of minutes, if not worse. On top of that, compilation times are unpredictable, depending on a combination of language features, external libraries, and type annotations. A single line change may increase compilation times ten fold.\nWhat can we do? It’s paramount we gain greater insight into the tools and libraries we use. There are also established (anti-)patterns that you should know about, if you fancy to keep compilation times to a minimum. And why not utilizing all cores when compiling? The stock Scala compiler can’t do it, but Triplequote Hydra is here to change that. Sit tight and let’s cut down on compilation time!</p>\n","id":"BRZ-9093","speakers":[{"name":"Mirco Dotta","company":"Triplequote","id":"28dedbaf61652d69a840e92c5dfac09594109e7a","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/28dedbaf61652d69a840e92c5dfac09594109e7a","rel":"https://cfp.scala.io/api/profile/speaker","title":"Mirco Dotta"},"twitter":"@mircodotta"},{"name":"Iulian Dragos","company":"Triplequote","id":"eaec95768309bf6edb2047bc7f324f75f3b58c73","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/eaec95768309bf6edb2047bc7f324f75f3b58c73","rel":"https://cfp.scala.io/api/profile/speaker","title":"Iulian Dragos"},"twitter":"@jaguarul"}],"title":"Compiling like a boss!","lang":"en","summary":"We all love Scala, but the one aspect we have a hard time accepting are long compile times. It’s not uncommon for a project to experience compilation times of a handful of minutes, if not worse. On top of that, compilation times are unpredictable, depending on a combination of language features, external libraries, and type annotations. A single line change may increase compilation times ten fold.\r\nWhat can we do? It’s paramount we gain greater insight into the tools and libraries we use. There are also established (anti-)patterns that you should know about, if you fancy to keep compilation times to a minimum. And why not utilizing all cores when compiling? The stock Scala compiler can’t do it, but Triplequote Hydra is here to change that. Sit tight and let’s cut down on compilation time!"},{"talkType":"Conference","track":"Apprendre Scala","audienceLevel":"Débutant","summaryAsHtml":"<p>Scala and functional programming can be scary at first for those of us coming from the OOP world. With a bunch of new concepts such as immutability, first-class functions, implicits, and a ton of language features, it is easy to get overwhelmed when jumping into Scala. We will take a look at some of the major advantages of Scala and why you  should start using it. Walking away from this session you will have a good starting point for starting with Scala without needing to know what monads and applicative functors are.</p>\n","id":"BMS-4134","speakers":[{"name":"Magnus Härlin","company":"SpeedLedger","id":"17b833499ff4dc218d127f8a7717e4b3571f0c57","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/17b833499ff4dc218d127f8a7717e4b3571f0c57","rel":"https://cfp.scala.io/api/profile/speaker","title":"Magnus Härlin"},"twitter":"@MagnusHarlin"}],"title":"Scala for Java developers","lang":"en","summary":"Scala and functional programming can be scary at first for those of us coming from the OOP world. With a bunch of new concepts such as immutability, first-class functions, implicits, and a ton of language features, it is easy to get overwhelmed when jumping into Scala. We will take a look at some of the major advantages of Scala and why you  should start using it. Walking away from this session you will have a good starting point for starting with Scala without needing to know what monads and applicative functors are."},{"talkType":"Conference","track":"Type & Functional Programming","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Nous allons voir comment généraliser les traitement basé sur la structure de vos données avec &quot;la programmation générique&quot;.\nNous nous appuierons sur la fameuse librairie shapeless pour générer automatiquement les instances d&#x27;une type classe.\nLe but de la présentation est de montrer ce type de programmation peut vous être utile tous les jours.</p>\n","id":"KEH-1415","speakers":[{"name":"Etienne Couritas","company":"The Independant Calculating Agent","id":"6376d8b03f5efe785ab2e3dd767bc5829f07aa3c","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/6376d8b03f5efe785ab2e3dd767bc5829f07aa3c","rel":"https://cfp.scala.io/api/profile/speaker","title":"Etienne Couritas"},"twitter":"@courieti"}],"title":"Déduction automatique d'instance de type classes avec shapeless.","lang":"fr","summary":"Nous allons voir comment généraliser les traitement basé sur la structure de vos données avec \"la programmation générique\".\r\nNous nous appuierons sur la fameuse librairie shapeless pour générer automatiquement les instances d'une type classe.\r\nLe but de la présentation est de montrer ce type de programmation peut vous être utile tous les jours."},{"talkType":"Quickie","track":"Scala & Ecosystem","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Pourquoi redémarrer une application lorsqu&#x27;on a seulement changé une ou quelques propriétés dans son le fichier de configuration. <a href=\"https://github.com/typesafehub/config\">Typesafe Config</a> est une excellente lib de config pour les languages sur JVM basée sur HOCON, mais ce qu&#x27;il lui manque est la réactivité aux changements. Ce que je vous propose dans ce talk, est une nouvelle lib réactive et qui parle toujours HOCON : un wrapper léger au dessus de Typesafe Config basé sur <a href=\"http://akka.io/\">Akka</a>.</p>\n","id":"KKA-4209","speakers":[{"name":"Mohamed ACHELIF","company":"Freelance","id":"b931de353d169c9253b715ae3cb4042379dac1c4","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/b931de353d169c9253b715ae3cb4042379dac1c4","rel":"https://cfp.scala.io/api/profile/speaker","title":"Mohamed ACHELIF"},"twitter":"@achelimed"}],"title":"Reactive-Config va vous Hoconer... so Don't Stop The Appli \\o/","lang":"fr","summary":"Pourquoi redémarrer une application lorsqu'on a seulement changé une ou quelques propriétés dans son le fichier de configuration. [Typesafe Config](https://github.com/typesafehub/config) est une excellente lib de config pour les languages sur JVM basée sur HOCON, mais ce qu'il lui manque est la réactivité aux changements. Ce que je vous propose dans ce talk, est une nouvelle lib réactive et qui parle toujours HOCON : un wrapper léger au dessus de Typesafe Config basé sur [Akka](http://akka.io/)."},{"talkType":"Conference","track":"Type & Functional Programming","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Functional programming is on the rise; monads are everywhere. But how to choose the right wrapper for the values which we manipulate (i.e. monad)? Quite often, the answer is far from obvious, and it’s useful to delay the decision as much as possible. Furthermore, picking a particular monad too early might only obscure important business logic details.</p>\n<p>There are (at least) two ways to solve the problem, which are quite popular: free monads and the tagless final encoding. Both are equivalent in expressive power, but are radically different when it comes to code.</p>\n<p>In this live-coding talk we’ll see how to transform a simple application which relies on <code>Future</code>s into more generic forms, using either the free monad or tagless final. We’ll see how these two representations compare in terms of boilerplate, readability, composability and stack-safety. We’ll also discuss which approach might be a better fit for selected use-cases.</p>\n","id":"REI-2575","speakers":[{"name":"Adam Warski","company":"http://www.softwaremill.com","id":"da86d2e8228a6abf86197644f198ff79eeb3894c","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/da86d2e8228a6abf86197644f198ff79eeb3894c","rel":"https://cfp.scala.io/api/profile/speaker","title":"Adam Warski"},"twitter":"@adamwarski"}],"title":"Free monad or tagless final? How not to commit to a monad too early.","lang":"en","summary":"Functional programming is on the rise; monads are everywhere. But how to choose the right wrapper for the values which we manipulate (i.e. monad)? Quite often, the answer is far from obvious, and it’s useful to delay the decision as much as possible. Furthermore, picking a particular monad too early might only obscure important business logic details.\r\n\r\nThere are (at least) two ways to solve the problem, which are quite popular: free monads and the tagless final encoding. Both are equivalent in expressive power, but are radically different when it comes to code.\r\n\r\nIn this live-coding talk we’ll see how to transform a simple application which relies on `Future`s into more generic forms, using either the free monad or tagless final. We’ll see how these two representations compare in terms of boilerplate, readability, composability and stack-safety. We’ll also discuss which approach might be a better fit for selected use-cases."},{"talkType":"Conference","track":"Apprendre Scala","audienceLevel":"Débutant","summaryAsHtml":"<p>Akka Stream est un framework de traitements des flux permettant de construire des systèmes évènementiels et reactive.</p>\n<p>Nous travaillons depuis un an chez Lizeo à l&#x27;aide de cette technologie sur un projet Big Data dont l&#x27;objectif est de traiter des dizaines de millions de produits par jour.</p>\n<p>Je vous propose d&#x27;en parcourir les notions fondamentales : sources, flows, sinks, graphs ; et de vous fournir des exemples de mise œuvre allant du &quot;Hello world!&quot; à une intégrations avec Kafka en passant par l&#x27;illustration de la propriété de back pressure du framework.</p>\n","id":"ILE-4698","speakers":[{"name":"Marc Karassev","company":"Lizeo group","id":"bf1eb4aa2fea4d9fd3f3b45aad890feb6783ac48","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/bf1eb4aa2fea4d9fd3f3b45aad890feb6783ac48","rel":"https://cfp.scala.io/api/profile/speaker","title":"Marc Karassev"},"twitter":"@KarassevMarc"}],"title":"Introduction à Akka Stream","lang":"fr","summary":"Akka Stream est un framework de traitements des flux permettant de construire des systèmes évènementiels et reactive.\r\n\r\nNous travaillons depuis un an chez Lizeo à l'aide de cette technologie sur un projet Big Data dont l'objectif est de traiter des dizaines de millions de produits par jour.\r\n\r\nJe vous propose d'en parcourir les notions fondamentales : sources, flows, sinks, graphs ; et de vous fournir des exemples de mise œuvre allant du \"Hello world!\" à une intégrations avec Kafka en passant par l'illustration de la propriété de back pressure du framework."},{"talkType":"Short conference","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Programming in Scala can be very time consuming sometimes. Finding the most efficient way to solve a problem can end up in days of frustration. This talk is a story of trail and error with a twist at the end. It’s a story of API endpoints, generic programming, Shapeless and what happens when they all come together. Everything with plenty of examples.</p>\n","id":"MAK-0458","speakers":[{"name":"Maria Livia Chiorean","company":"The Guardian","id":"9f19d075369101f8ad94f73c9424ce676f7fb4bf","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/9f19d075369101f8ad94f73c9424ce676f7fb4bf","rel":"https://cfp.scala.io/api/profile/speaker","title":"Maria Livia Chiorean"},"twitter":"@marry16_08"}],"title":"The Path to Generic Endpoints using Shapeless","lang":"en","summary":"Programming in Scala can be very time consuming sometimes. Finding the most efficient way to solve a problem can end up in days of frustration. This talk is a story of trail and error with a twist at the end. It’s a story of API endpoints, generic programming, Shapeless and what happens when they all come together. Everything with plenty of examples."},{"talkType":"Quickie","track":"Scala & Ecosystem","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Today, Java RMI (Remote Method Invocation) is not used in the enterprise. There were several attempts in the past (Enterprise Java Beans) but it was finally overthrown by web techniques. However, on a enterprise point of view, this technology has good qualities : it is type-safe and pure Java, with no need for XML. It also has problems : it doesn&#x27;t have authentication, it can not cross firewalls easily, it does not inter-operate with non-Java technology, and above all, it is hard to use, as it requires remote objects to implement a Remote interface. The Remote4J project aims to address this specific problem, with the help of functional programming.</p>\n<p>The basic operation is as follows : an object is wrapped in a Remote monad and made available remotely through calls to its map and flatMap methods. This allows to send desired operations remotely as closures, a technique called query shipping. It makes remote programming considerably simpler, as it allows to use existing code directly, without re-developing required remote objects.</p>\n<p>All-in-all, the Remote4J project provides a small library, meant to address remote operations in a type-safe, simple and secure way. It comes as a replacem</p>\n","id":"OPJ-8775","speakers":[{"name":"Raphael Jolly","company":"Databeans","id":"6653cd3d52e69e459c618bc45d9688cded54e599","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/6653cd3d52e69e459c618bc45d9688cded54e599","rel":"https://cfp.scala.io/api/profile/speaker","title":"Raphael Jolly"},"twitter":"@raphaeljolly"}],"title":"Remote4J : monadic remote invocation for Java","lang":"fr","summary":"Today, Java RMI (Remote Method Invocation) is not used in the enterprise. There were several attempts in the past (Enterprise Java Beans) but it was finally overthrown by web techniques. However, on a enterprise point of view, this technology has good qualities : it is type-safe and pure Java, with no need for XML. It also has problems : it doesn't have authentication, it can not cross firewalls easily, it does not inter-operate with non-Java technology, and above all, it is hard to use, as it requires remote objects to implement a Remote interface. The Remote4J project aims to address this specific problem, with the help of functional programming.\r\n\r\nThe basic operation is as follows : an object is wrapped in a Remote monad and made available remotely through calls to its map and flatMap methods. This allows to send desired operations remotely as closures, a technique called query shipping. It makes remote programming considerably simpler, as it allows to use existing code directly, without re-developing required remote objects.\r\n\r\nAll-in-all, the Remote4J project provides a small library, meant to address remote operations in a type-safe, simple and secure way. It comes as a replacem"},{"talkType":"Conference","track":"BigData & MachineLearning","audienceLevel":"Débutant","summaryAsHtml":"<p>Que l’on soit data scientist, data engineer, ou développeur web, avec la place que la donnée prend dans nos projets, nous avons forcément dû toucher à la théorie des probabilités et/ou à la programmation fonctionnelle.</p>\n<p>Le but de la présentation est de faire le lien entre algèbre, programmation fonctionnelle et probabiliste, afin de montrer qu’ils ne sont pas différents les uns des autres. En effet, des propriétés d’un domaine se trouvent être utilisées dans un autre.</p>\n<p>L&#x27;objectif est d’élargir la vision des participants sur le monde de la donnée, de fournir des pistes de réflexion et de montrer ce qu’il est possible de faire en combinant des sciences différentes. Elle permettra ainsi à un développeur de pouvoir appréhender des sujets de data science, tout comme au data scientist d’industrialiser ses propres algorithmes grâce à un langage comme Scala.</p>\n<p>Après avoir vu les notions de base d’algèbre et de probabilités, je montrerai comment celles-ci sont combinées dans la programmation probabiliste grâce à Scala et la librairie Figaro.</p>\n","id":"IUN-4548","speakers":[{"name":"Samy Zarour","company":"Ebiznext","id":"9ddb453473948b50e44c2583dded5a2d703cc92f","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/9ddb453473948b50e44c2583dded5a2d703cc92f","rel":"https://cfp.scala.io/api/profile/speaker","title":"Samy Zarour"},"twitter":null}],"title":"Bayes et Boole sont sur un bateau","lang":"fr","summary":"Que l’on soit data scientist, data engineer, ou développeur web, avec la place que la donnée prend dans nos projets, nous avons forcément dû toucher à la théorie des probabilités et/ou à la programmation fonctionnelle.\r\n\r\nLe but de la présentation est de faire le lien entre algèbre, programmation fonctionnelle et probabiliste, afin de montrer qu’ils ne sont pas différents les uns des autres. En effet, des propriétés d’un domaine se trouvent être utilisées dans un autre. \r\n\r\nL'objectif est d’élargir la vision des participants sur le monde de la donnée, de fournir des pistes de réflexion et de montrer ce qu’il est possible de faire en combinant des sciences différentes. Elle permettra ainsi à un développeur de pouvoir appréhender des sujets de data science, tout comme au data scientist d’industrialiser ses propres algorithmes grâce à un langage comme Scala.\r\n\r\nAprès avoir vu les notions de base d’algèbre et de probabilités, je montrerai comment celles-ci sont combinées dans la programmation probabiliste grâce à Scala et la librairie Figaro.\r\n"},{"talkType":"Conference","track":"Other Languages","audienceLevel":"Débutant","summaryAsHtml":"<p>Domain invariants are all around you. In every business rule your domain expert ever tried to give you. You should use them to guide your design.</p>\n<p>You should also be testing them! Not only an example representing them: but testing the invariant itself.</p>\n<p>You can do them with property-based tests (PBTs). If you think you cannot do PBTs on legacy codebases (or outside FP) this talk should show you otherwise.</p>\n<p>Let’s also use Property-based tests to reduce test-debt. Create smaller, fewer tests that: test more, are more readable &amp; document the problem. Challenge your understanding of the domain and communication with domain experts.</p>\n<p>I want you to basically lose all the excuses blocking you from doing property based tests today on your codebase</p>\n","id":"BKM-7415","speakers":[{"name":"Romeu Moura","company":"@ArollaFr","id":"7c9f41f311b425478e131f30ad1fc9c2b86ac8f9","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/7c9f41f311b425478e131f30ad1fc9c2b86ac8f9","rel":"https://cfp.scala.io/api/profile/speaker","title":"Romeu Moura"},"twitter":"@malk_zameth"}],"title":"Domain Invariants & Property-Based Testing for the Masses","lang":"en","summary":"Domain invariants are all around you. In every business rule your domain expert ever tried to give you. You should use them to guide your design.\r\n\r\nYou should also be testing them! Not only an example representing them: but testing the invariant itself.\r\n\r\nYou can do them with property-based tests (PBTs). If you think you cannot do PBTs on legacy codebases (or outside FP) this talk should show you otherwise.\r\n\r\nLet’s also use Property-based tests to reduce test-debt. Create smaller, fewer tests that: test more, are more readable & document the problem. Challenge your understanding of the domain and communication with domain experts.\r\n\r\nI want you to basically lose all the excuses blocking you from doing property based tests today on your codebase"},{"talkType":"Short conference","track":"Type & Functional Programming","audienceLevel":"Débutant","summaryAsHtml":"<p><code>goto</code> statements are now universally considered bad programming practice. However, there was a time when they were in widespread use. In this talk, we will go through a brief overview of the ways we&#x27;ve chosen to express logic in our programs throughout the years and why we&#x27;ve chosen to constrain ourselves ever more in an effort to write more correct and maintainable code. Finally, we will discuss recursion schemes and whether they are the next step in this process towards better code.</p>\n","id":"WNZ-4368","speakers":[{"name":"Jean-Rémi Desjardins","company":"SlamData","id":"64aaafed6c6dde07c11e77b14edb94b5f20fdf52","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/64aaafed6c6dde07c11e77b14edb94b5f20fdf52","rel":"https://cfp.scala.io/api/profile/speaker","title":"Jean-Rémi Desjardins"},"twitter":"jrdesjardins"}],"title":"From `goto` Statements to Recursion Schemes","lang":"en","summary":"`goto` statements are now universally considered bad programming practice. However, there was a time when they were in widespread use. In this talk, we will go through a brief overview of the ways we've chosen to express logic in our programs throughout the years and why we've chosen to constrain ourselves ever more in an effort to write more correct and maintainable code. Finally, we will discuss recursion schemes and whether they are the next step in this process towards better code."},{"talkType":"Conference","track":"Type & Functional Programming","audienceLevel":"Débutant","summaryAsHtml":"<p>Category Theory has become one of the hot topics in our community. Why is this theory suddenly so interesting for developers? Why are the cool kids talking so much about it? How can we apply its principles in our code?</p>\n<p>This talk will introduce the general principles behind Category Theory, it will show practical examples of how this theory has managed to simplify and solve common challenges that we encounter in our code daily.</p>\n","id":"HVN-4880","speakers":[{"name":"Daniela Sfregola","company":"Daniela Tech LTD","id":"5e97d05535726adc50a059c82a6e699b4696456f","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/5e97d05535726adc50a059c82a6e699b4696456f","rel":"https://cfp.scala.io/api/profile/speaker","title":"Daniela Sfregola"},"twitter":"@DanielaSfregola"}],"title":"A practical introduction to Category Theory","lang":"en","summary":"Category Theory has become one of the hot topics in our community. Why is this theory suddenly so interesting for developers? Why are the cool kids talking so much about it? How can we apply its principles in our code?\r\n\r\nThis talk will introduce the general principles behind Category Theory, it will show practical examples of how this theory has managed to simplify and solve common challenges that we encounter in our code daily."},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Le choix par défaut a longtemps été Akka-Streams pour la mise en oeuvre d&#x27;applications réactives.</p>\n<p>Des alternatives commencent à apparaître et Monix se présente comme une solution plus simple à mettre en oeuvre, mais tout aussi puissante.</p>\n<p>Dans ce talk, je vous propose d&#x27;illustrer la réalisation d&#x27;une application réactive avec chacune des deux librairies pour les confronter.</p>\n<p>Nous évaluerons entre autres :</p>\n<ul>\n<li>La puissance du DSL,</li>\n<li>la simplicité de mise en oeuvre,</li>\n<li>la complexité des pipelines d&#x27;exécution,</li>\n<li>les points d&#x27;extension possibles</li>\n<li>la testabilité.</li>\n</ul>\n<p>Ce talk s&#x27;adresse aux participants qui souhaitent s&#x27;initier à la programmation réactive ou qui possèdent une expérience dans l&#x27;une des deux libraries.</p>\n<p>A l&#x27;issue de ce talk, j&#x27;espère vous permettre de choisir la solution la plus adaptée à votre besoin.</p>\n","id":"BRN-0694","speakers":[{"name":"Bounkong Khamphousone","company":"Ebiznext","id":"601eb94c3a8546ae1326ad5fc3041bef62c53f77","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/601eb94c3a8546ae1326ad5fc3041bef62c53f77","rel":"https://cfp.scala.io/api/profile/speaker","title":"Bounkong Khamphousone"},"twitter":"@tiboun"}],"title":"Monix : Une alternative à Akka-Streams ?","lang":"fr","summary":"Le choix par défaut a longtemps été Akka-Streams pour la mise en oeuvre d'applications réactives.\r\n\r\nDes alternatives commencent à apparaître et Monix se présente comme une solution plus simple à mettre en oeuvre, mais tout aussi puissante.\r\n\r\nDans ce talk, je vous propose d'illustrer la réalisation d'une application réactive avec chacune des deux librairies pour les confronter.\r\n\r\nNous évaluerons entre autres : \r\n\r\n - La puissance du DSL, \r\n - la simplicité de mise en oeuvre, \r\n - la complexité des pipelines d'exécution, \r\n - les points d'extension possibles\r\n - la testabilité.\r\n\r\nCe talk s'adresse aux participants qui souhaitent s'initier à la programmation réactive ou qui possèdent une expérience dans l'une des deux libraries.\r\n\r\nA l'issue de ce talk, j'espère vous permettre de choisir la solution la plus adaptée à votre besoin.\r\n\r\n"},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Specs2 is a testing library in Scala supporting many testing styles and idioms, and some of them are not very well known. For example, do you know that:</p>\n<ul>\n<li>you can create data tables with headers, rows and cells for data driven tests using Scala operators?</li>\n<li>you can control how many tests are being executed per ScalaCheck property from the command-line?</li>\n<li>you can create tests &quot;on the fly&quot;, depending on the success of other tests?</li>\n</ul>\n<p>This presentation will give you an overview of the main functionalities of specs2 and give you some tips and tricks to help with your daily testing. We will also discuss how specs2 relies on critical features from the Scala language and the cost of maintaining such a large library as Scala and its ecosystem evolve year after year.</p>\n","id":"JEU-5245","speakers":[{"name":"Eric Torreborre","company":"Zalando","id":"82b0349166f1aadaa2bc600160aa2bac79814963","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/82b0349166f1aadaa2bc600160aa2bac79814963","rel":"https://cfp.scala.io/api/profile/speaker","title":"Eric Torreborre"},"twitter":"@etorreborre"}],"title":"Specs2, from starters to dessert and... a look in the kitchen","lang":"en","summary":"Specs2 is a testing library in Scala supporting many testing styles and idioms, and some of them are not very well known. For example, do you know that:\r\n\r\n - you can create data tables with headers, rows and cells for data driven tests using Scala operators?\r\n - you can control how many tests are being executed per ScalaCheck property from the command-line? \r\n - you can create tests \"on the fly\", depending on the success of other tests?\r\n\r\nThis presentation will give you an overview of the main functionalities of specs2 and give you some tips and tricks to help with your daily testing. We will also discuss how specs2 relies on critical features from the Scala language and the cost of maintaining such a large library as Scala and its ecosystem evolve year after year."},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Scala 2.13 will come with a new implementation of the standard collections. In this talk I will explain the motivations for this rewrite and will introduce the new design. You will see that few things will change for users despite the internal design being very different. I will present the benefits that come from the new design, in particular when working with views. Finally, I will precise the scope of the rewrite, the current status and the remaining work to do.</p>\n","id":"PZB-1026","speakers":[{"name":"Julien Richard-Foy","company":"Scala Center","id":"6d57fb25680df058c3dea0eaeaac0a2dd352c87f","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/6d57fb25680df058c3dea0eaeaac0a2dd352c87f","rel":"https://cfp.scala.io/api/profile/speaker","title":"Julien Richard-Foy"},"twitter":"julienrf"}],"title":"What’s in the next iteration of the standard collections?","lang":"en","summary":"Scala 2.13 will come with a new implementation of the standard collections. In this talk I will explain the motivations for this rewrite and will introduce the new design. You will see that few things will change for users despite the internal design being very different. I will present the benefits that come from the new design, in particular when working with views. Finally, I will precise the scope of the rewrite, the current status and the remaining work to do."},{"talkType":"Quickie","track":"Apprendre Scala","audienceLevel":"Débutant","summaryAsHtml":"<p>La configuration de vos projets Scala (Akka, Play ou autres) peut se révéler complexe et parfois difficile à maintenir.\nJe vous propose  dans ce talk de découvrir la librairie PureConfig, un outil très intéressant qui permet d&#x27;exprimer la configuration sous forme des types prédéfinis et de fonctions pures et qui apporte une alternative très séduisante aux configurations classiques (typesafe ou autres).</p>\n","id":"YTD-7691","speakers":[{"name":"Jean-Yves BESSON","company":"LIZEO ONLINE MEDIA GROUPE","id":"ec5395c5f4d0228d7e6fe3a07ecf825716e882ef","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/ec5395c5f4d0228d7e6fe3a07ecf825716e882ef","rel":"https://cfp.scala.io/api/profile/speaker","title":"Jean-Yves BESSON"},"twitter":"@BessonJeanYves"}],"title":"Simplifiez la configuration de vos projets avec PureConfig","lang":"fr","summary":"La configuration de vos projets Scala (Akka, Play ou autres) peut se révéler complexe et parfois difficile à maintenir. \r\nJe vous propose  dans ce talk de découvrir la librairie PureConfig, un outil très intéressant qui permet d'exprimer la configuration sous forme des types prédéfinis et de fonctions pures et qui apporte une alternative très séduisante aux configurations classiques (typesafe ou autres)."},{"talkType":"Conference","track":"Type & Functional Programming","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Le monde réel n&#x27;est souvent pas très coopératif lorsqu&#x27;il s&#x27;agit d&#x27;écrire des programmes dans le style fonctionnel, les effets de bords venant rapidement complexifier le code.<br  />\nPourtant, il existe des solutions pour manipuler les <code>Future[Try[Option[String]]]</code> et autres empilements hétéroclites de types représentant des effets de bord.\nCette présentation sera l&#x27;occasion de découvrir quelques-unes de ces solutions, comme les <em>Monad Transformers</em> ou encore les <em>Extensible Effects</em>.</p>\n","id":"YEU-1860","speakers":[{"name":"Benoit Lemoine","company":"Mnubo","id":"ef8933bb26512f3a7aeef3f40998269f9705d053","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/ef8933bb26512f3a7aeef3f40998269f9705d053","rel":"https://cfp.scala.io/api/profile/speaker","title":"Benoit Lemoine"},"twitter":"@benoit_lemoine"}],"title":"Survivre à un monde débordant d'effets","lang":"fr","summary":"Le monde réel n'est souvent pas très coopératif lorsqu'il s'agit d'écrire des programmes dans le style fonctionnel, les effets de bords venant rapidement complexifier le code.  \r\nPourtant, il existe des solutions pour manipuler les `Future[Try[Option[String]]]` et autres empilements hétéroclites de types représentant des effets de bord. \r\nCette présentation sera l'occasion de découvrir quelques-unes de ces solutions, comme les *Monad Transformers* ou encore les *Extensible Effects*."},{"talkType":"Conference","track":"Type & Functional Programming","audienceLevel":"Débutant","summaryAsHtml":"<p>Scala offre des outils remarquable pour la <em>modélisation de données</em> dont les <em>case classes</em> et <em>familles scellées</em> sont les représentants les plus connus. De nombreux patrons de conception fonctionnels (<em>streams</em>, <em>monoides</em>, <em>monades</em>, <em>interprètes</em>, <em>structure libres</em>, ...) reposent sur une modélisation astucieuse de types de données afin d&#x27;obtenir les <em>propriétés désirées</em>.</p>\n<p>Cette présentation vous propose de découvrir les concepts simples et puissants sur lesquels ces notions reposent: <em>types inductifs</em>, <em>algèbres</em>, <em>morphismes</em>, <em>co-algèbres</em>, ... Ceci afin d&#x27;une part de démystifier des notions d&#x27;apparence abruptes comme les <em>monades libres</em> en exposant leur construction de manière simple et progressive. Mais aussi et surtout de donner à chacun les outils permettant de concevoir <em>ses propres structures</em> répondant à <em>ses propres besoins</em>.</p>\n","id":"SJO-8794","speakers":[{"name":"Christophe Calvès","company":"MFG Labs","id":"0257e3d8b10e0fae9ae649eb3000c8a823a58b11","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/0257e3d8b10e0fae9ae649eb3000c8a823a58b11","rel":"https://cfp.scala.io/api/profile/speaker","title":"Christophe Calvès"},"twitter":"@chrilves"}],"title":"Principes et outils pour modéliser astucieusement vos données en Scala: des énumérations aux algèbres libres.","lang":"fr","summary":"Scala offre des outils remarquable pour la _modélisation de données_ dont les _case classes_ et _familles scellées_ sont les représentants les plus connus. De nombreux patrons de conception fonctionnels (_streams_, _monoides_, _monades_, _interprètes_, _structure libres_, ...) reposent sur une modélisation astucieuse de types de données afin d'obtenir les _propriétés désirées_.\r\n\r\nCette présentation vous propose de découvrir les concepts simples et puissants sur lesquels ces notions reposent: _types inductifs_, _algèbres_, _morphismes_, _co-algèbres_, ... Ceci afin d'une part de démystifier des notions d'apparence abruptes comme les _monades libres_ en exposant leur construction de manière simple et progressive. Mais aussi et surtout de donner à chacun les outils permettant de concevoir _ses propres structures_ répondant à _ses propres besoins_."},{"talkType":"Conference","track":"Other Languages","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Haskell est connu mais souvent perçu comme un langage assez théorique où il est difficile d&#x27;accomplir des applications tangibles.<br  /></p>\n<p>Le but de cette présentation est donc de présenter Haskell sous une lentille plus professionnelle en abordant une variété de problématiques réelles et comment elles sont résolues dans ce langage, par exemple:</p>\n<ul>\n<li><p>Concurrence: Implémenter une base de données est un véritable casse-tête de programmation concurrente et parallèle.<br  /></p>\n</li>\n<li><p>Réseau: Comment communiquer avec un programme via des sockets TCP. Comment du côté serveur, gérer une multitude de clients en même temps.</p>\n</li>\n<li><p>Système de fichier: Une base de données ont des contraintes ACID sur les données quelles stockent. Nous verrons donc un exemple d&#x27;implémentation avec Haskell.</p>\n</li>\n</ul>\n","id":"MOY-0757","speakers":[{"name":"Yorick Laupa","company":"vente-privee","id":"1db9e3807350883adf6deaf6b8475a2549fb2dea","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/1db9e3807350883adf6deaf6b8475a2549fb2dea","rel":"https://cfp.scala.io/api/profile/speaker","title":"Yorick Laupa"},"twitter":"@yoeight"}],"title":"Implementer une base de données en Haskell","lang":"fr","summary":"Haskell est connu mais souvent perçu comme un langage assez théorique où il est difficile d'accomplir des applications tangibles.  \r\n\r\nLe but de cette présentation est donc de présenter Haskell sous une lentille plus professionnelle en abordant une variété de problématiques réelles et comment elles sont résolues dans ce langage, par exemple:\r\n\r\n* Concurrence: Implémenter une base de données est un véritable casse-tête de programmation concurrente et parallèle.  \r\n\r\n* Réseau: Comment communiquer avec un programme via des sockets TCP. Comment du côté serveur, gérer une multitude de clients en même temps.\r\n\r\n* Système de fichier: Une base de données ont des contraintes ACID sur les données quelles stockent. Nous verrons donc un exemple d'implémentation avec Haskell. "},{"talkType":"Short conference","track":"Scala & Ecosystem","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Scala Native est un compilateur AOT (Ahead of Time) qui compile Scala vers un binaire natif prêt à être exécuté directement, sans JVM. Il combine toute la puissance du système de type de Scala avec une meilleure interopérabilité avec les libraries natives et un temps de démarrage immédiat.</p>\n<p>Cette session sera l&#x27;occasion de découvrir Scala Native et ses particularités par rapport au Scala traditionnel. Nous y découvrirons quelle est l&#x27;expérience de développement avec Scala Native et ses primitives bas-niveau, et en quoi cela peut être utile par rapport à développer en Scala sur la JVM, ou en natif avec Haskell/Rust/Go/...</p>\n<p>Nous verrons rapidement un exemple réel d&#x27;application en ligne de commande écrit avec Scala Native, qui combine:\n- de l’interopérabilité avec une library native (libcurl),\n- et l&#x27;usage d&#x27;une library purement Scala-esque, mais maintenant dans un contexte natif (scala-parser-combinators).</p>\n","id":"GXY-0158","speakers":[{"name":"Antoine Gourlay","company":null,"id":"d8b4e2ac4942067ff802e53344b56f626c4d4003","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/d8b4e2ac4942067ff802e53344b56f626c4d4003","rel":"https://cfp.scala.io/api/profile/speaker","title":"Antoine Gourlay"},"twitter":"@gourlaysama"}],"title":"Scala Native: le mariage entre la performance du natif et le confort du fonctionnel en Scala","lang":"fr","summary":"Scala Native est un compilateur AOT (Ahead of Time) qui compile Scala vers un binaire natif prêt à être exécuté directement, sans JVM. Il combine toute la puissance du système de type de Scala avec une meilleure interopérabilité avec les libraries natives et un temps de démarrage immédiat.\r\n\r\nCette session sera l'occasion de découvrir Scala Native et ses particularités par rapport au Scala traditionnel. Nous y découvrirons quelle est l'expérience de développement avec Scala Native et ses primitives bas-niveau, et en quoi cela peut être utile par rapport à développer en Scala sur la JVM, ou en natif avec Haskell/Rust/Go/...\r\n\r\nNous verrons rapidement un exemple réel d'application en ligne de commande écrit avec Scala Native, qui combine:\r\n- de l’interopérabilité avec une library native (libcurl),\r\n- et l'usage d'une library purement Scala-esque, mais maintenant dans un contexte natif (scala-parser-combinators).\r\n"},{"talkType":"Hands-on Labs","track":"Other Languages","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Try to create a code you will not consider “legacy”.</p>\n<p>I’ll play the role of your client and use around 20 techniques to make you fail.</p>\n<p>You will fail.</p>\n<p>We’ll then discuss what techniques I have used, how they happen in real life, how to fight them in your project.</p>\n<p>Bring your own laptop with your environment. We’ll split into small teams.</p>\n","id":"FWY-0763","speakers":[{"name":"Romeu Moura","company":"@ArollaFr","id":"7c9f41f311b425478e131f30ad1fc9c2b86ac8f9","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/7c9f41f311b425478e131f30ad1fc9c2b86ac8f9","rel":"https://cfp.scala.io/api/profile/speaker","title":"Romeu Moura"},"twitter":"@malk_zameth"}],"title":"Fight the Systemic Issues why your Code is Sad","lang":"en","summary":"Try to create a code you will not consider “legacy”.\r\n\r\nI’ll play the role of your client and use around 20 techniques to make you fail.\r\n\r\nYou will fail.\r\n\r\nWe’ll then discuss what techniques I have used, how they happen in real life, how to fight them in your project.\r\n\r\nBring your own laptop with your environment. We’ll split into small teams."},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Selling point of most functional languages is immutability.  It seems no brainer but the problem start when you have to <em>update</em> deeply nested structure.\nThe aim of this presentation is to show efficient methods for working with immutable objects (value classes and collections)\nDuring presentation I will  focus on two main approaches worth knowing: lenses and zippers. Explaining a bit of theory with some practical examples with my two favourite libraries: monocle and circe.</p>\n","id":"CBG-0520","speakers":[{"name":"Marcin Matuszak","company":"Ryanair","id":"f68ab18087a3ff828851dd0826a8ef59c93e1b7f","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/f68ab18087a3ff828851dd0826a8ef59c93e1b7f","rel":"https://cfp.scala.io/api/profile/speaker","title":"Marcin Matuszak"},"twitter":"@marcinmatuszak"}],"title":"Working efficiently with immutability","lang":"en","summary":"Selling point of most functional languages is immutability.  It seems no brainer but the problem start when you have to _update_ deeply nested structure.\r\nThe aim of this presentation is to show efficient methods for working with immutable objects (value classes and collections)\r\nDuring presentation I will  focus on two main approaches worth knowing: lenses and zippers. Explaining a bit of theory with some practical examples with my two favourite libraries: monocle and circe. "},{"talkType":"Conference","track":"Other Languages","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Haskell a la côte auprès des développeurs sur Github, mais plus souvent pour des projets du dimanche. Chez <a href=\"https://www.fretlink.com/\">FretLink</a>, nous mettons en production du code Haskell, et ce sans travailler de nuit !</p>\n<p>Développer en Haskell, c’est s’offrir une tranquillité d’esprit en laissant la machine vous aider pour se concentrer sur les sujets plus abstraits.</p>\n<p>Je vous propose une plongée dans une partie de l’infrastructure de production d’une start-up en croissance, dans un contexte métier riche et exigeant.</p>\n<p>On parlera APIs, services, déploiement, intégration de services tiers, et parsing de fichiers plats, ERPs obligent !</p>\n<p>Et comme nous sommes modernes, l’outillage sera également à l’honneur : tests, documentation d’API, et qualité de code pour une stack moderne, avec là encore un peu de nouveauté et pas mal d’ambition.</p>\n<p>Peut-être vous donnerai-je envie ;)</p>\n","id":"CKV-8909","speakers":[{"name":"Frédéric Menou","company":"FretLink","id":"59c1bc15fe85aa100e2bd66fa0dea6f55b6a13ba","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/59c1bc15fe85aa100e2bd66fa0dea6f55b6a13ba","rel":"https://cfp.scala.io/api/profile/speaker","title":"Frédéric Menou"},"twitter":"@ptit_fred"},{"name":"Clément Delafargue","company":"Clever Cloud","id":"ad36032dfb473504555950435795ac48292b8a09","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/ad36032dfb473504555950435795ac48292b8a09","rel":"https://cfp.scala.io/api/profile/speaker","title":"Clément Delafargue"},"twitter":"@clementd"}],"title":"Haskell en production en 2017 dans une startup ? Yup.","lang":"fr","summary":"Haskell a la côte auprès des développeurs sur Github, mais plus souvent pour des projets du dimanche. Chez [FretLink](https://www.fretlink.com/), nous mettons en production du code Haskell, et ce sans travailler de nuit !\r\n\r\nDévelopper en Haskell, c’est s’offrir une tranquillité d’esprit en laissant la machine vous aider pour se concentrer sur les sujets plus abstraits.\r\n\r\nJe vous propose une plongée dans une partie de l’infrastructure de production d’une start-up en croissance, dans un contexte métier riche et exigeant.\r\n\r\nOn parlera APIs, services, déploiement, intégration de services tiers, et parsing de fichiers plats, ERPs obligent !\r\n\r\nEt comme nous sommes modernes, l’outillage sera également à l’honneur : tests, documentation d’API, et qualité de code pour une stack moderne, avec là encore un peu de nouveauté et pas mal d’ambition.\r\n\r\nPeut-être vous donnerai-je envie ;)"},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Créer un SI réactif en partant de progiciels fermés et sans forte culture interne du développement est un véritable challenge.\nLa MNT construit depuis 2 ans un S.I. réactif, résilient et élastique pour mieux répondre aux besoins et aux attentes de ses adhérents.</p>\n<p>L&#x27;équipe pluri disciplinaire au coeur de cette aventure vous propose un retour d&#x27;expérience portant sur :\n- L&#x27;architecture\n- Les technologies (Scala, Akka, Kafka, Play, MongoDb, ...)\n- La mise en place d&#x27;une démarche DevOps et les outils associés\n- L&#x27;homologation industrialisée\n- La mise en place d&#x27;infrastructures nouvelles pour répondre aux nouveaux besoins.</p>\n<p>Après cette présentation, vous saurez ce qui a fonctionné… ou pas !\nEt peut-être y trouverez-vous quelques idées pour vos propres projets, où partager avec nous ce qui a fonctionné chez vous !</p>\n","id":"SJK-3068","speakers":[{"name":"Jérôme Duchemin","company":"MNT","id":"b8dba3c585cb39a3bc43a4015ba601fcefc8a851","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/b8dba3c585cb39a3bc43a4015ba601fcefc8a851","rel":"https://cfp.scala.io/api/profile/speaker","title":"Jérôme Duchemin"},"twitter":"@jidez"}],"title":"Comment louper la création d'un SI réactif ? - Retour d'expérience MNT","lang":"fr","summary":"Créer un SI réactif en partant de progiciels fermés et sans forte culture interne du développement est un véritable challenge.\r\nLa MNT construit depuis 2 ans un S.I. réactif, résilient et élastique pour mieux répondre aux besoins et aux attentes de ses adhérents.\r\n\r\nL'équipe pluri disciplinaire au coeur de cette aventure vous propose un retour d'expérience portant sur :\r\n- L'architecture\r\n- Les technologies (Scala, Akka, Kafka, Play, MongoDb, ...)\r\n- La mise en place d'une démarche DevOps et les outils associés\r\n- L'homologation industrialisée\r\n- La mise en place d'infrastructures nouvelles pour répondre aux nouveaux besoins.\r\n\r\nAprès cette présentation, vous saurez ce qui a fonctionné… ou pas !\r\nEt peut-être y trouverez-vous quelques idées pour vos propres projets, où partager avec nous ce qui a fonctionné chez vous !"},{"talkType":"Conference","track":"BigData & MachineLearning","audienceLevel":"Débutant","summaryAsHtml":"<p>At Criteo we produce tons of data each day. We run something like 300k jobs, processing around 4PB of logs to produce trillions of new records each day. We do that using several frameworks such as Hive, raw Map/Reduce, Scalding or Spark.</p>\n<p>A few years ago we migrated from a centralized jobs scheduler based on Ruby to a distributed system based on Scala. In this presentation I will introduce you to &quot;Cuttle&quot; our open-source Scala based jobs scheduler. You will learn what it is good for and how you can use it to produce data at scale.</p>\n","id":"QEI-3130","speakers":[{"name":"Guillaume Bort","company":"Criteo","id":"02cfbdc6451fad13a43231d094448b91b038af14","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/02cfbdc6451fad13a43231d094448b91b038af14","rel":"https://cfp.scala.io/api/profile/speaker","title":"Guillaume Bort"},"twitter":"@guillaumebort"}],"title":"Time Series Jobs Scheduling at Criteo With Cuttle","lang":"fr","summary":"At Criteo we produce tons of data each day. We run something like 300k jobs, processing around 4PB of logs to produce trillions of new records each day. We do that using several frameworks such as Hive, raw Map/Reduce, Scalding or Spark.\r\n\r\nA few years ago we migrated from a centralized jobs scheduler based on Ruby to a distributed system based on Scala. In this presentation I will introduce you to \"Cuttle\" our open-source Scala based jobs scheduler. You will learn what it is good for and how you can use it to produce data at scale."},{"talkType":"Conference","track":"BigData & MachineLearning","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>At Indix we collect and process lots of data. Most of our processing initially were done as MapReduce (henceforth MR) jobs but as our data grew in size we moved towards stream processing. We monitor the behaviour of our systems through collection of business metrics. It was relatively easy to write Stats jobs on our MR output but things got tricky when we moved to Stream based processing.</p>\n<p>Our key learnings over the years have been</p>\n<ul>\n<li>Approximate stats now &gt; Accurate stats tomorrow</li>\n<li>Our metrics were just aggregates (counts / uniques) with rollups</li>\n<li>Existing open source systems were more for system monitoring than business metrics</li>\n<li>Model aggregates as Commutative Monoids using <a href=\"https://twitter.github.io/algebird/typeclasses/monoid.html\">Algebird</a>&#x27;s typeclasses.</li>\n</ul>\n<p>We put all our learnings and built a system called Abel which solved this for us. It aggregates a million events in ~15 minutes on a single box.</p>\n","id":"XZI-2391","speakers":[{"name":"Ashwanth Kumar","company":"Indix","id":"af43dbbc7d952fd3182cb9ef91ddd2063cc46109","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/af43dbbc7d952fd3182cb9ef91ddd2063cc46109","rel":"https://cfp.scala.io/api/profile/speaker","title":"Ashwanth Kumar"},"twitter":"@_ashwanthkumar"},{"name":"Sriram Ramachandrasekaran","company":"Indix","id":"0fa9118c8c843d22b4dcf74f7dd791ded1141d78","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/0fa9118c8c843d22b4dcf74f7dd791ded1141d78","rel":"https://cfp.scala.io/api/profile/speaker","title":"Sriram Ramachandrasekaran"},"twitter":"@brewkode"}],"title":"Using Monoids for Large Scale Business Stats","lang":"en","summary":"At Indix we collect and process lots of data. Most of our processing initially were done as MapReduce (henceforth MR) jobs but as our data grew in size we moved towards stream processing. We monitor the behaviour of our systems through collection of business metrics. It was relatively easy to write Stats jobs on our MR output but things got tricky when we moved to Stream based processing.\r\n\r\nOur key learnings over the years have been\r\n\r\n- Approximate stats now > Accurate stats tomorrow\r\n- Our metrics were just aggregates (counts / uniques) with rollups\r\n- Existing open source systems were more for system monitoring than business metrics\r\n- Model aggregates as Commutative Monoids using [Algebird](https://twitter.github.io/algebird/typeclasses/monoid.html)'s typeclasses.\r\n\r\nWe put all our learnings and built a system called Abel which solved this for us. It aggregates a million events in ~15 minutes on a single box.\r\n"},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>This presentation shows the current Features available as of Freestyle 0.4.0.</p>\n<p>Freestyle is a library that empowers stack-safe purely functional applications and libraries that support parallel and sequential computations where declaration is decoupled from interpretation.\nFreestyle encourages programs built atop Free algebras that are interpreted at the edge of your application ensuring effects are localized and performed in a controlled environment.\nApplications built with Freestyle can be interpreted to any runtime semantics supported by the interpreter target type.</p>\n<p>Freestyle is expanding and beyond the core for building Free and Tagless final apps, new microservices centered libraries are emerging following these same patterns.</p>\n<p>In this presentation we&#x27;ll go over the main building blocks in Freestyle core, several optimization to common FP datatypes and some of the most important features and companion libraries you can use to remain purely functional across your system.</p>\n","id":"DVT-2122","speakers":[{"name":"Raúl Raja Martínez","company":"@47deg","id":"078bb4adf50f65e5609f91e897bfdb5268daaf3d","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/078bb4adf50f65e5609f91e897bfdb5268daaf3d","rel":"https://cfp.scala.io/api/profile/speaker","title":"Raúl Raja Martínez"},"twitter":"@raulraja"}],"title":"Freestyle: A framework for pure functional apps, libs and microservices in Scala","lang":"en","summary":"This presentation shows the current Features available as of Freestyle 0.4.0.\r\n\r\nFreestyle is a library that empowers stack-safe purely functional applications and libraries that support parallel and sequential computations where declaration is decoupled from interpretation. \r\nFreestyle encourages programs built atop Free algebras that are interpreted at the edge of your application ensuring effects are localized and performed in a controlled environment. \r\nApplications built with Freestyle can be interpreted to any runtime semantics supported by the interpreter target type.\r\n\r\nFreestyle is expanding and beyond the core for building Free and Tagless final apps, new microservices centered libraries are emerging following these same patterns.\r\n\r\nIn this presentation we'll go over the main building blocks in Freestyle core, several optimization to common FP datatypes and some of the most important features and companion libraries you can use to remain purely functional across your system."},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Scalafix is a rewrite and linting tool for Scala. Initially born for migrating Scala 2 code to Dotty, it has now become general purpose and it&#x27;s being adopted by library authors and development teams.\nIn this talk where Scalafix is positioned in the universe of Scala tooling, what it can do for you and how to write your own Rules for fixing and linting your code.</p>\n","id":"VQQ-9508","speakers":[{"name":"Gabriele Petronella","company":"buildo","id":"9183e23a13d49b69f636024e250e1a45c27d80a5","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/9183e23a13d49b69f636024e250e1a45c27d80a5","rel":"https://cfp.scala.io/api/profile/speaker","title":"Gabriele Petronella"},"twitter":"@gabro27"}],"title":"Move fast and fix things","lang":"en","summary":"Scalafix is a rewrite and linting tool for Scala. Initially born for migrating Scala 2 code to Dotty, it has now become general purpose and it's being adopted by library authors and development teams.\r\nIn this talk where Scalafix is positioned in the universe of Scala tooling, what it can do for you and how to write your own Rules for fixing and linting your code."},{"talkType":"Conference","track":"Type & Functional Programming","audienceLevel":"Débutant","summaryAsHtml":"<p>In 1991 Erik Meijer, Maarten Fokkinga, and Ross Paterson published &quot;&quot;Functional Programming with Bananas, Lenses, Envelopes and Barbed Wire.&quot;&quot; This paper is a classic one, widely recognizable in the FP community. Constructs described - known as recursion schemas - have real world applications. Strictly speaking, explicit recursion is the ‘goto’ of pure functional programming. Recursion schemas provide same level of sanity as loops did for structural programming back in the day.\nOver the years a lot of the progress have been made. Papers like &quot;&quot;Recursion schemes from comonads&quot;&quot; by Tarmo Uustalu, Varmo Vene &amp; Alberto Pardo or &quot;&quot;Unifying Structured Recursion Schemes&quot;&quot; by Ralf Hinze, Nicolas Wu &amp; Jeremy Gibbons - pushed the concept forward.\nThis talk is about generalization of a very specific recursion schema (called catamorphism) over fixed point data type. After providing introduction the concept of catamorphism, we will jump straight to fix point data types trying to solve some real-world problems. Code examples are in Scala. Code examples use Matryoshka - which is an open sourced project design to generalize folds, unfolds, and traversals for fixed point data structures in Scala.</p>\n","id":"BYW-7300","speakers":[{"name":"Pawel Szulc","company":"Slamdata","id":"a08899a775d210b91fa0c15210bceb3a3cd1d704","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/a08899a775d210b91fa0c15210bceb3a3cd1d704","rel":"https://cfp.scala.io/api/profile/speaker","title":"Pawel Szulc"},"twitter":"@rabbitonweb"}],"title":"Going bananas with recursion schemes for fixed point data types","lang":"fr","summary":"In 1991 Erik Meijer, Maarten Fokkinga, and Ross Paterson published \"\"Functional Programming with Bananas, Lenses, Envelopes and Barbed Wire.\"\" This paper is a classic one, widely recognizable in the FP community. Constructs described - known as recursion schemas - have real world applications. Strictly speaking, explicit recursion is the ‘goto’ of pure functional programming. Recursion schemas provide same level of sanity as loops did for structural programming back in the day.\r\nOver the years a lot of the progress have been made. Papers like \"\"Recursion schemes from comonads\"\" by Tarmo Uustalu, Varmo Vene & Alberto Pardo or \"\"Unifying Structured Recursion Schemes\"\" by Ralf Hinze, Nicolas Wu & Jeremy Gibbons - pushed the concept forward.\r\nThis talk is about generalization of a very specific recursion schema (called catamorphism) over fixed point data type. After providing introduction the concept of catamorphism, we will jump straight to fix point data types trying to solve some real-world problems. Code examples are in Scala. Code examples use Matryoshka - which is an open sourced project design to generalize folds, unfolds, and traversals for fixed point data structures in Scala."},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>After two years of development, CBT, a new build tool for Scala is gaining attention and traction. It set out to deal with the slow response times and usability problems of the existing tools available and managed to achieve quite notable results. Core features are lightning fast response time, simple use of plain Scala code to describe builds in a familiar way and easy extensibility and hackability. The recently released IntelliJ IDEA and Ensime integrations removed the last big hurdles for adoption. The time has come for CBT.</p>\n","id":"ZRT-1071","speakers":[{"name":"Jan Christopher Vogt","company":"x.ai","id":"9353130288bdd64dd44aea3ca445e4e1e1856eaa","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/9353130288bdd64dd44aea3ca445e4e1e1856eaa","rel":"https://cfp.scala.io/api/profile/speaker","title":"Jan Christopher Vogt"},"twitter":"@cvogt"}],"title":"Next generation Scala builds with CBT","lang":"en","summary":"After two years of development, CBT, a new build tool for Scala is gaining attention and traction. It set out to deal with the slow response times and usability problems of the existing tools available and managed to achieve quite notable results. Core features are lightning fast response time, simple use of plain Scala code to describe builds in a familiar way and easy extensibility and hackability. The recently released IntelliJ IDEA and Ensime integrations removed the last big hurdles for adoption. The time has come for CBT."},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Expert et sénior","summaryAsHtml":"<p>All applications, eventually, come down to <code>IO</code>.  Well, unless you have uncontrolled side-effects, which would be weird and horrible.  This talk explores not only why you want the <code>IO</code> monad in Scala (i.e. why side-effects are weird and horrible), but also how it works.  Specifically, we&#x27;ll be looking at the new cats-effect project, which introduces not only a production-viable <code>IO</code> type for the cats framework, but also a set of typeclasses and rigorous laws for characterizing what an effect type <em>is</em> and how it should behave.</p>\n","id":"WBI-4236","speakers":[{"name":"Daniel Spiewak","company":"@slamdata ","id":"784d51eed521b6327a52fcd3d487d7d7844a0e50","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/784d51eed521b6327a52fcd3d487d7d7844a0e50","rel":"https://cfp.scala.io/api/profile/speaker","title":"Daniel Spiewak"},"twitter":"@djspiewak"}],"title":"The Making of an IO","lang":"en","summary":"All applications, eventually, come down to `IO`.  Well, unless you have uncontrolled side-effects, which would be weird and horrible.  This talk explores not only why you want the `IO` monad in Scala (i.e. why side-effects are weird and horrible), but also how it works.  Specifically, we'll be looking at the new cats-effect project, which introduces not only a production-viable `IO` type for the cats framework, but also a set of typeclasses and rigorous laws for characterizing what an effect type *is* and how it should behave."},{"talkType":"Short conference","track":"Apprendre Scala","audienceLevel":"Débutant","summaryAsHtml":"<p>Perdue dans la brume de la recherche de mon premier emploi, j’étais en quête d’un nouveau défi, que j’ai trouvé dans le Scala.\nCe talk vous présentera ce qui m’a motivée dans cet apprentissage, les ressources à disposition, le cadre d’utilisation de ces nouvelles compétences (frameworks Play2, Akka, Slick), mes premières petites déconvenues, mais aussi ce qui m’a particulièrement plu et qui pourrait séduire ceux qui hésiteraient encore à franchir le pas.</p>\n","id":"ZQV-0763","speakers":[{"name":"Melanie Lavabre","company":"Tabmo","id":"328a2359056a2cb46b6ff1020fdb6f81a5082d6f","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/328a2359056a2cb46b6ff1020fdb6f81a5082d6f","rel":"https://cfp.scala.io/api/profile/speaker","title":"Melanie Lavabre"},"twitter":"febroshka"}],"title":"Débuter en Scala: entre incompréhension et for-compréhension","lang":"fr","summary":"Perdue dans la brume de la recherche de mon premier emploi, j’étais en quête d’un nouveau défi, que j’ai trouvé dans le Scala. \r\nCe talk vous présentera ce qui m’a motivée dans cet apprentissage, les ressources à disposition, le cadre d’utilisation de ces nouvelles compétences (frameworks Play2, Akka, Slick), mes premières petites déconvenues, mais aussi ce qui m’a particulièrement plu et qui pourrait séduire ceux qui hésiteraient encore à franchir le pas.  \r\n"},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Le Scala permet d&#x27;écrire les différentes couches des applications.\nLors de la ré-écriture récente de notre application, nous avons pris le pari de partir sur scalajs, avec du react.</p>\n<p>Voici un retour d&#x27;expérience sur les différents choix que nous avons pu faire, que ce soit sur les frameworks, les façades ou encore la gestion des statiques ou du css</p>\n","id":"EUC-3401","speakers":[{"name":"Francois Laroche","company":"Make.org","id":"5d2a911f2ad2384138cbc3c5471751fac7697824","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/5d2a911f2ad2384138cbc3c5471751fac7697824","rel":"https://cfp.scala.io/api/profile/speaker","title":"Francois Laroche"},"twitter":null},{"name":"Charley Pestoury","company":"Make.org","id":"1afd4f0e6bc8cec77c1cc4301650244765e81081","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/1afd4f0e6bc8cec77c1cc4301650244765e81081","rel":"https://cfp.scala.io/api/profile/speaker","title":"Charley Pestoury"},"twitter":null}],"title":"Mon application en scala de la tête aux pieds","lang":"fr","summary":"Le Scala permet d'écrire les différentes couches des applications.\r\nLors de la ré-écriture récente de notre application, nous avons pris le pari de partir sur scalajs, avec du react.\r\n\r\nVoici un retour d'expérience sur les différents choix que nous avons pu faire, que ce soit sur les frameworks, les façades ou encore la gestion des statiques ou du css\r\n"},{"talkType":"Conference","track":"Type & Functional Programming","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Event sourcing is a technique for managing application state by storing changes instead of the current state. It offers several interesting properties, such as the ability to know the application state at any point in time or reinterpret past events. It also makes it easier to correctly integrate distributed systems.</p>\n<p>In this talk, we show how functional programming principles can make event sourcing composable and simpler to use. We describe a minimal model for events and event handlers and we introduce a Sourced monad, which allows to compose event sourcing code. We demonstrate that event sourcing becomes an implementation detail of the persistence layer, and existing code can be sourced almost transparently.</p>\n","id":"QPV-1645","speakers":[{"name":"Daniel Krzywicki","company":"Fabernovel Technologies","id":"a7200d0a3910a98ef66846cb73781e2778ac0207","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/a7200d0a3910a98ef66846cb73781e2778ac0207","rel":"https://cfp.scala.io/api/profile/speaker","title":"Daniel Krzywicki"},"twitter":"kierdeja"},{"name":"Étienne Vallette d'Osia","company":"Fabernovel Technologies","id":"a34ce0c2af4fe013f3b9c9f43abd014a1d117f14","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/a34ce0c2af4fe013f3b9c9f43abd014a1d117f14","rel":"https://cfp.scala.io/api/profile/speaker","title":"Étienne Vallette d'Osia"},"twitter":"@dohzya"}],"title":"Composable event sourcing with monads ","lang":"en","summary":"Event sourcing is a technique for managing application state by storing changes instead of the current state. It offers several interesting properties, such as the ability to know the application state at any point in time or reinterpret past events. It also makes it easier to correctly integrate distributed systems. \r\n\r\nIn this talk, we show how functional programming principles can make event sourcing composable and simpler to use. We describe a minimal model for events and event handlers and we introduce a Sourced monad, which allows to compose event sourcing code. We demonstrate that event sourcing becomes an implementation detail of the persistence layer, and existing code can be sourced almost transparently.\r\n"},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Have you ever wanted a distributed, highly-available database that provided ordered, transactional semantics?  With the release of Google Spanner to the public, Eric Brewer discussed the approach they took to achieve this goal, but it is only available via Google Cloud Platform.  Similar semantics can be found via FaunaDB, a database created to solve these very problems with the ideas of Daniel Abadi and others via the Calvin paper.  In this talk, we will discuss the theories behind Calvin and the consistency/availability tradeoffs made in the face of partitions, as well as how we are planning to use it at Starbucks in our distributed service architecture.</p>\n","id":"YTX-7704","speakers":[{"name":"Jamie Allen","company":"Starbucks","id":"0130c5cd69eae376a995a6d3ff1da69e40e7db54","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/0130c5cd69eae376a995a6d3ff1da69e40e7db54","rel":"https://cfp.scala.io/api/profile/speaker","title":"Jamie Allen"},"twitter":"@jamie_allen"}],"title":"Beyond Eventual Consistency","lang":"en","summary":"Have you ever wanted a distributed, highly-available database that provided ordered, transactional semantics?  With the release of Google Spanner to the public, Eric Brewer discussed the approach they took to achieve this goal, but it is only available via Google Cloud Platform.  Similar semantics can be found via FaunaDB, a database created to solve these very problems with the ideas of Daniel Abadi and others via the Calvin paper.  In this talk, we will discuss the theories behind Calvin and the consistency/availability tradeoffs made in the face of partitions, as well as how we are planning to use it at Starbucks in our distributed service architecture."},{"talkType":"Conference","track":"Apprendre Scala","audienceLevel":"Débutant","summaryAsHtml":"<p>The demand for a richer experience on the client side is continuously increasing in our industry. For Scala developers this used to mean that you would have to transition from generating the HTML on the server side to creating APIs serving JSON and start investigating front-end frameworks like Angular and React. As a consequence you would also have to start learning Javascript or leave the task to a front-end developer.</p>\n<p>Luckily ScalaJS is here, mature and with a growing community. Thanks to the work of the ScalaJS team we can now create beautiful and rich front-end clients without leaving our comfort zone of strong static typing protected from WTF moments. In this talk we will explore some of the aspects of building a Full Stack Scala application: easy communication between client and server and sharing of validation logic and data objects.</p>\n","id":"UPC-3267","speakers":[{"name":"Trond Bjerkestrand","company":"Groosker","id":"18445d8c5cd26ab5e2656763bfb0d5f950d50ae4","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/18445d8c5cd26ab5e2656763bfb0d5f950d50ae4","rel":"https://cfp.scala.io/api/profile/speaker","title":"Trond Bjerkestrand"},"twitter":"@tbjerkes"}],"title":"Full Stack Scala","lang":"en","summary":"The demand for a richer experience on the client side is continuously increasing in our industry. For Scala developers this used to mean that you would have to transition from generating the HTML on the server side to creating APIs serving JSON and start investigating front-end frameworks like Angular and React. As a consequence you would also have to start learning Javascript or leave the task to a front-end developer. \r\n\r\nLuckily ScalaJS is here, mature and with a growing community. Thanks to the work of the ScalaJS team we can now create beautiful and rich front-end clients without leaving our comfort zone of strong static typing protected from WTF moments. In this talk we will explore some of the aspects of building a Full Stack Scala application: easy communication between client and server and sharing of validation logic and data objects. \r\n"},{"talkType":"Conference","track":"Type & Functional Programming","audienceLevel":"Débutant","summaryAsHtml":"<p>Scala is foremost a functional programming language. Most of us have become accustomed to writing our applications with immutable data structures and pure functions, but what about those few little impure functions? This talk aims to give some solutions for dealing with those nasty impurities that may come to bite you, when not handled properly.</p>\n<p>When talking about functional programming in Scala, we often come across the term “referential transparency”, but it’s explanation can sometimes be confusing or even condescending. This talk tries to develop an intuition for the concepts of referential transparency and side-effects from the ground up, including all of the benefits and drawbacks to sticking to such a style of programming. Finally, we will have a look at some “real world”-scenarios in “real world”-code, where referential transparency has had an immense impact on the effectiveness of development.</p>\n","id":"BTR-5301","speakers":[{"name":"Luka Jacobowitz","company":"@codecentric ","id":"9fb5399f94b489ec1519e4f099e44452772c1233","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/9fb5399f94b489ec1519e4f099e44452772c1233","rel":"https://cfp.scala.io/api/profile/speaker","title":"Luka Jacobowitz"},"twitter":"@LukaJacobowitz"}],"title":"What Referential Transparency can do for you","lang":"en","summary":"Scala is foremost a functional programming language. Most of us have become accustomed to writing our applications with immutable data structures and pure functions, but what about those few little impure functions? This talk aims to give some solutions for dealing with those nasty impurities that may come to bite you, when not handled properly.\r\n\r\nWhen talking about functional programming in Scala, we often come across the term “referential transparency”, but it’s explanation can sometimes be confusing or even condescending. This talk tries to develop an intuition for the concepts of referential transparency and side-effects from the ground up, including all of the benefits and drawbacks to sticking to such a style of programming. Finally, we will have a look at some “real world”-scenarios in “real world”-code, where referential transparency has had an immense impact on the effectiveness of development.\r\n"},{"talkType":"Conference","track":"Apprendre Scala","audienceLevel":"Débutant","summaryAsHtml":"<p>La programmation fonctionnelle est de plus en plus présente dans les langages (y compris mainstream: Java, C#, JavaScript…), les frameworks et bien sûr les discussions !</p>\n<p>Si tu ne vois pas encore de quoi il s’agit vraiment, ce qu’elle apporte ou comment t’y prendre pour commencer, cette présentation est faite pour toi !</p>\n<p>Nous verrons par des exemples concrets ses avantages et comment transformer progressivement du code impératif pour le rendre plus fonctionnel \\o/</p>\n<p>La présentation s’appuie sur le langage Scala mais les principes évoqués sont accessibles pour tout langage qui se respecte ^^</p>\n","id":"KMN-8770","speakers":[{"name":"Loïc Knuchel","company":"Criteo","id":"7585fc5361bcf11525521dbb3e937e24ebbb421b","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/7585fc5361bcf11525521dbb3e937e24ebbb421b","rel":"https://cfp.scala.io/api/profile/speaker","title":"Loïc Knuchel"},"twitter":"loicknuchel"}],"title":"Refactoring fonctionnel, comment s’y prendre ?","lang":"fr","summary":"La programmation fonctionnelle est de plus en plus présente dans les langages (y compris mainstream: Java, C#, JavaScript…), les frameworks et bien sûr les discussions !\r\n\r\nSi tu ne vois pas encore de quoi il s’agit vraiment, ce qu’elle apporte ou comment t’y prendre pour commencer, cette présentation est faite pour toi !\r\n\r\nNous verrons par des exemples concrets ses avantages et comment transformer progressivement du code impératif pour le rendre plus fonctionnel \\o/\r\n\r\nLa présentation s’appuie sur le langage Scala mais les principes évoqués sont accessibles pour tout langage qui se respecte ^^"},{"talkType":"Hands-on Labs","track":"Type & Functional Programming","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Looking for a partner to share Scala code with? A partner you can joke with about how “for” loops just look bad? Interested in learning cool new Scala features? Looking for a fabulous life partner? Awesome, but you probably won’t find the latter here :)\nHere you’ll explore the Scala way-of-life by engaging in pair programming with developers you just met.</p>\n<p>The workshop is based on vanilla Scala, where we’ll answer short Scala functional exercise, trying to find interesting answers that may inspire us for years to come (as opposed to just finding a quick answer!). Every time the bell rings, we’ll solve a new question with a new partner.\nDon’t worry about missing out on interesting methods for solving the questions; between each round we’ll showcase and explore interesting solutions, so you’ll get to wander through new styles for writing Scala, how to make your code more readable, and acquire new tools for your Scala tool box.</p>\n<p>All attendees need to</p>\n<ul>\n<li><p>bring their computer with a Scala IDE that they are familiar with.</p>\n</li>\n<li><p>have a slack account and join scala-speed-dating workspace as they will need to send messages via slack at the workshop  (invite link https://goo.gl/fACjhQ)</p>\n</li>\n</ul>\n","id":"AWJ-7809","speakers":[{"name":"Amit Anafy","company":"Wix","id":"27ba9c519ccc5f6d51c1ef955a63f99c3f9606de","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/27ba9c519ccc5f6d51c1ef955a63f99c3f9606de","rel":"https://cfp.scala.io/api/profile/speaker","title":"Amit Anafy"},"twitter":"@AnafyAmit"}],"title":"Scala Speed Dating","lang":"fr","summary":"Looking for a partner to share Scala code with? A partner you can joke with about how “for” loops just look bad? Interested in learning cool new Scala features? Looking for a fabulous life partner? Awesome, but you probably won’t find the latter here :)\r\nHere you’ll explore the Scala way-of-life by engaging in pair programming with developers you just met.\r\n\r\nThe workshop is based on vanilla Scala, where we’ll answer short Scala functional exercise, trying to find interesting answers that may inspire us for years to come (as opposed to just finding a quick answer!). Every time the bell rings, we’ll solve a new question with a new partner.\r\nDon’t worry about missing out on interesting methods for solving the questions; between each round we’ll showcase and explore interesting solutions, so you’ll get to wander through new styles for writing Scala, how to make your code more readable, and acquire new tools for your Scala tool box.\r\n\r\n All attendees need to\r\n\r\n* bring their computer with a Scala IDE that they are familiar with. \r\n\r\n* have a slack account and join scala-speed-dating workspace as they will need to send messages via slack at the workshop  (invite link https://goo.gl/fACjhQ)"},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Le but de cette session est de présenter un cas concret d’application de la programmation fonctionnelle en production chez Teads.\nNotre système d’enchères en temps réel de publicités sur Internet repose sur un moteur de règle efficace et performant afin de sélectionner la meilleure diffusion à proposer à chaque utilisateur.\nNous parcourrons ensemble les différentes étapes de construction de notre outil, d’un simple pattern matching jusqu’à l’utilisation concrète de la catégorie de Kleisli.</p>\n","id":"ZNW-6625","speakers":[{"name":"Xavier BUCCHIOTTY","company":"Teads","id":"51145fe8e015a016bc4855c9ed9ee856d4ed09c3","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/51145fe8e015a016bc4855c9ed9ee856d4ed09c3","rel":"https://cfp.scala.io/api/profile/speaker","title":"Xavier BUCCHIOTTY"},"twitter":"@xbucchiotty"},{"name":"Tristan Sallé","company":"Teads","id":"6db5adbbc55dbaa8e25472b24566e8ded80d740f","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/6db5adbbc55dbaa8e25472b24566e8ded80d740f","rel":"https://cfp.scala.io/api/profile/speaker","title":"Tristan Sallé"},"twitter":"@TristanSoullz"}],"title":"Kleisli, un ami qui vous veut du bien","lang":"fr","summary":"Le but de cette session est de présenter un cas concret d’application de la programmation fonctionnelle en production chez Teads. \r\nNotre système d’enchères en temps réel de publicités sur Internet repose sur un moteur de règle efficace et performant afin de sélectionner la meilleure diffusion à proposer à chaque utilisateur. \r\nNous parcourrons ensemble les différentes étapes de construction de notre outil, d’un simple pattern matching jusqu’à l’utilisation concrète de la catégorie de Kleisli.\r\n"},{"talkType":"Short conference","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Beaucoup de code technique qui se répète dans votre base de code ?\nN&#x27;écrivez plus ce code, générez le, avec Scala meta.</p>\n<ul>\n<li>Génération de méthodes avec des arités différentes</li>\n<li>Reader basé sur un sealed trait + case objects...</li>\n</ul>\n<p>Découvrez les deux types de macros possibles</p>\n<p>A l&#x27;issue de cette présentation, vous saurez comment écrire votre première macro et comment l&#x27;intégrer à votre build.</p>\n","id":"RBP-4845","speakers":[{"name":"Damien Gouyette","company":"Freelance","id":"f9fc65391600558c83fb666fc85b81b17a5d4e7c","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/f9fc65391600558c83fb666fc85b81b17a5d4e7c","rel":"https://cfp.scala.io/api/profile/speaker","title":"Damien Gouyette"},"twitter":"@cestpasdur"}],"title":"Mort au boilerplate avec Scala meta","lang":"fr","summary":"Beaucoup de code technique qui se répète dans votre base de code ?\r\nN'écrivez plus ce code, générez le, avec Scala meta.\r\n\r\n* Génération de méthodes avec des arités différentes\r\n* Reader basé sur un sealed trait + case objects...\r\n\r\nDécouvrez les deux types de macros possibles\r\n\r\nA l'issue de cette présentation, vous saurez comment écrire votre première macro et comment l'intégrer à votre build.\r\n"},{"talkType":"Quickie","track":"BigData & MachineLearning","audienceLevel":"Débutant","summaryAsHtml":"<p>Spark nous a permis de sortir du mode “Map Reduce and Wait” grâce aux perfs et à son architecture (un driver, cela change tout).</p>\n<p>Dans cette présentation rapide, nous allons voir comment on peut utiliser un peu d&#x27;algèbre pour améliorer fortement la mise à jour de jobs critiques en production et réduire sa consommation quotidienne de café !</p>\n","id":"ISR-4983","speakers":[{"name":"Jonathan Winandy","company":null,"id":"009d1cc4049517a15c9aad9d662c807916dc6bb7","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/009d1cc4049517a15c9aad9d662c807916dc6bb7","rel":"https://cfp.scala.io/api/profile/speaker","title":"Jonathan Winandy"},"twitter":null}],"title":"Retour d’expérience : Feedbacks ultra rapides avec Spark","lang":"fr","summary":"Spark nous a permis de sortir du mode “Map Reduce and Wait” grâce aux perfs et à son architecture (un driver, cela change tout).\r\n\r\nDans cette présentation rapide, nous allons voir comment on peut utiliser un peu d'algèbre pour améliorer fortement la mise à jour de jobs critiques en production et réduire sa consommation quotidienne de café !"},{"talkType":"Short conference","track":"Apprendre Scala","audienceLevel":"Débutant","summaryAsHtml":"<p>Passed 8 years since we started to use Scala. We have introduced Scala to several projects, but the way was never smooth sailing. We ran into a lot of troubles and got through them one by one.</p>\n<p>In this session we talk about the story of our 8 years. What were the barriers which introduce Scala? And now, we will talk about what we feel as well.</p>\n","id":"HUX-7779","speakers":[{"name":"Naoki Takezoe","company":"BizReach, Inc","id":"d81853dfae5dc7db25df729e785f2468444153df","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/d81853dfae5dc7db25df729e785f2468444153df","rel":"https://cfp.scala.io/api/profile/speaker","title":"Naoki Takezoe"},"twitter":"@takezoen"},{"name":"Takako shimamoto","company":"BizReach Inc.","id":"a0bad890f64a6ea3f3406ccd655c46d0955e2d17","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/a0bad890f64a6ea3f3406ccd655c46d0955e2d17","rel":"https://cfp.scala.io/api/profile/speaker","title":"Takako shimamoto"},"twitter":null}],"title":"Our 8 years journey with Scala","lang":"en","summary":"Passed 8 years since we started to use Scala. We have introduced Scala to several projects, but the way was never smooth sailing. We ran into a lot of troubles and got through them one by one.\r\n\r\nIn this session we talk about the story of our 8 years. What were the barriers which introduce Scala? And now, we will talk about what we feel as well."},{"talkType":"Conference","track":"Type & Functional Programming","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Scala has a very powerful typesystem.  By leveraging this expressive language of types, we can be more confident about our code and be sure that certain bugs will never occur in our programs.  In this talk we will see a number of techniques with a mixed level of sophisticated-ness to exploit the rich typesystem that Scala gives us.</p>\n<p>Join the talk if you want to learn how to spend more time developing and less time hunting bugs!</p>\n","id":"ART-4873","speakers":[{"name":"Markus Hauck","company":"codecentric AG","id":"ec5aabe71e00281b32d57b94af7685ec8b659cb8","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/ec5aabe71e00281b32d57b94af7685ec8b659cb8","rel":"https://cfp.scala.io/api/profile/speaker","title":"Markus Hauck"},"twitter":"@markus1189"}],"title":"Let The Compiler Help You: How To Make The Most Of Scala's Typesystem","lang":"en","summary":"Scala has a very powerful typesystem.  By leveraging this expressive language of types, we can be more confident about our code and be sure that certain bugs will never occur in our programs.  In this talk we will see a number of techniques with a mixed level of sophisticated-ness to exploit the rich typesystem that Scala gives us.\r\n\r\nJoin the talk if you want to learn how to spend more time developing and less time hunting bugs!"},{"talkType":"Short conference","track":"Apprendre Scala","audienceLevel":"Débutant","summaryAsHtml":"<p>Scala is a powerful language, with lots of features that make day-to-day development more pleasant. Some would argue that there are actually too many. Regardless if that&#x27;s true or not, there are problems that can arise from using them - e.g. in the wrong context, or just too many features at a time. In this talk, we&#x27;ll go through some of these mistakes quickly, and see if there are any ways to avoid them.</p>\n","id":"UTV-9630","speakers":[{"name":"Jakub Kozłowski","company":"Scalac","id":"ebbc92e371ff500bd6645736310df9e8eef86133","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/ebbc92e371ff500bd6645736310df9e8eef86133","rel":"https://cfp.scala.io/api/profile/speaker","title":"Jakub Kozłowski"},"twitter":"@kubukoz"}],"title":"7 sins of a Scala beginner","lang":"en","summary":"Scala is a powerful language, with lots of features that make day-to-day development more pleasant. Some would argue that there are actually too many. Regardless if that's true or not, there are problems that can arise from using them - e.g. in the wrong context, or just too many features at a time. In this talk, we'll go through some of these mistakes quickly, and see if there are any ways to avoid them."},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Débutant","summaryAsHtml":"<p>Depuis plus de 10 ans, l’OWASP Top10 dirige la majorité des environnements réglementaires pour les certifications PCI. Il s’est imposé de plus en plus dans le monde du développement comme un référentiel incontournable(cité par les ANSSI, RGPD, NIS Framework et autres)  pour toutes les applications et est destiné souvent à contrôler le niveau de sécurité d’une application. La sécurité d’une application passe par une formation des équipes, des outils de controles et d’implémentation des codes propres.\nPour cela il est nécessaire de connaitre comment dans le langage utilisé ne pas commettre les erreurs du Top10. L’utulisation de Scala, comme tous les langages, ne peut faire qu’une application sera « secure by desgin ».\nNous verrons donc lors de ce talk les principales failles de l’OWASP Top10(version 2013 et préversion-2017)  et comment les éviter via Scala</p>\n","id":"QPX-8862","speakers":[{"name":"Sebastien Gioria","company":"AppSecFR","id":"f09f41f1386a7fae573df209ac6664be3b07e777","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/f09f41f1386a7fae573df209ac6664be3b07e777","rel":"https://cfp.scala.io/api/profile/speaker","title":"Sebastien Gioria"},"twitter":"@SPoint"}],"title":"Owasp Top10 pour les developpeurs scala","lang":"fr","summary":"Depuis plus de 10 ans, l’OWASP Top10 dirige la majorité des environnements réglementaires pour les certifications PCI. Il s’est imposé de plus en plus dans le monde du développement comme un référentiel incontournable(cité par les ANSSI, RGPD, NIS Framework et autres)  pour toutes les applications et est destiné souvent à contrôler le niveau de sécurité d’une application. La sécurité d’une application passe par une formation des équipes, des outils de controles et d’implémentation des codes propres.\r\nPour cela il est nécessaire de connaitre comment dans le langage utilisé ne pas commettre les erreurs du Top10. L’utulisation de Scala, comme tous les langages, ne peut faire qu’une application sera « secure by desgin ».\r\nNous verrons donc lors de ce talk les principales failles de l’OWASP Top10(version 2013 et préversion-2017)  et comment les éviter via Scala"},{"talkType":"Conference","track":"Type & Functional Programming","audienceLevel":"Expert et sénior","summaryAsHtml":"<p>Writing asynchronous code is often an uneasy fit for a language like Scala. Futures already facilitate asynchronous programming, but syntactic limitations make blocking or unchecked access of async values more natural than the safer alternatives. Impromptu is a tiny Scala library for safely defining and running graphs of dependent tasks, avoiding blocking or allowing access of not-yet-completed values, guaranteed the type system.</p>\n<p>We use several advanced Scala features to encode a task&#x27;s dependencies in its type, then restrict access within a task only to the results of tasks which are known to have been completed. We further take advantage of Scala&#x27;s type inference to avoid polluting the code with cumbersome type ascriptions. This gives us very lightweight and natural syntax, which is also safe.</p>\n<p>The talk will explore how Impromptu is implemented, and show how dependent types allow the framework to be written in just 30 lines of code, and show how a similar approach may be used to concisely implement typed actors.</p>\n<p>Furthermore, we take advantage of current research into implicit functions in\nDotty to remove the small amount of remaining boilerplate from Impromptu task\ndefinitions.</p>\n","id":"GLZ-8957","speakers":[{"name":"Jon Pretty","company":"Propensive","id":"1c880401ed12cc276b0f15a351827f2ca27737af","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/1c880401ed12cc276b0f15a351827f2ca27737af","rel":"https://cfp.scala.io/api/profile/speaker","title":"Jon Pretty"},"twitter":"@propensive"}],"title":"Impromptu: Dependently-typed Async","lang":"en","summary":"Writing asynchronous code is often an uneasy fit for a language like Scala. Futures already facilitate asynchronous programming, but syntactic limitations make blocking or unchecked access of async values more natural than the safer alternatives. Impromptu is a tiny Scala library for safely defining and running graphs of dependent tasks, avoiding blocking or allowing access of not-yet-completed values, guaranteed the type system.\r\n\r\nWe use several advanced Scala features to encode a task's dependencies in its type, then restrict access within a task only to the results of tasks which are known to have been completed. We further take advantage of Scala's type inference to avoid polluting the code with cumbersome type ascriptions. This gives us very lightweight and natural syntax, which is also safe.\r\n\r\nThe talk will explore how Impromptu is implemented, and show how dependent types allow the framework to be written in just 30 lines of code, and show how a similar approach may be used to concisely implement typed actors.\r\n\r\nFurthermore, we take advantage of current research into implicit functions in\r\nDotty to remove the small amount of remaining boilerplate from Impromptu task\r\ndefinitions."},{"talkType":"Conference","track":"Scala & Ecosystem","audienceLevel":"Intermédiaire","summaryAsHtml":"<p>Case class is a most widely used way to model your data. But when the data is huge, you can amazingly discover that only a tiny 10% of your precious RAM used for the data itself. But where is other 90%?</p>\n<p>During this talk, you will have a deep dive to the JVM internals learning about case class layout, Scala collections true memory overhead and ways to decrease it. We’ll introduce a scala-packed, the project helped Findify to solve a real-life case of reducing memory usage by an order of magnitude by extending Scala collections with transparent Shapeless-based case class &lt;-&gt; Array[Byte] packing.</p>\n","id":"LDR-8483","speakers":[{"name":"Roman Grebennikov","company":"Findify","id":"88c281ed083dacc8af5ae40d633b9b977e4fd339","link":{"href":"https://cfp.scala.io/api/conferences/ScalaIOFR2017/speakers/88c281ed083dacc8af5ae40d633b9b977e4fd339","rel":"https://cfp.scala.io/api/profile/speaker","title":"Roman Grebennikov"},"twitter":"@public_void_grv"}],"title":"Case classes ate my RAM","lang":"en","summary":"Case class is a most widely used way to model your data. But when the data is huge, you can amazingly discover that only a tiny 10% of your precious RAM used for the data itself. But where is other 90%?\r\n\r\nDuring this talk, you will have a deep dive to the JVM internals learning about case class layout, Scala collections true memory overhead and ways to decrease it. We’ll introduce a scala-packed, the project helped Findify to solve a real-life case of reducing memory usage by an order of magnitude by extending Scala collections with transparent Shapeless-based case class <-> Array[Byte] packing. "}]